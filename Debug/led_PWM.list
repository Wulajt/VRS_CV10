
led_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003344  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080034d4  080034d4  000134d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800356c  0800356c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800356c  0800356c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800356c  0800356c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000006c  080035e0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080035e0  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dc3  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000191e  00000000  00000000  00027e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000850  00000000  00000000  00029780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000778  00000000  00000000  00029fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001709a  00000000  00000000  0002a748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005c0c  00000000  00000000  000417e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000790f0  00000000  00000000  000473ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c04de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002528  00000000  00000000  000c055c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080034bc 	.word	0x080034bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080034bc 	.word	0x080034bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <__NVIC_GetPriorityGrouping+0x18>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	f003 0307 	and.w	r3, r3, #7
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	db0b      	blt.n	80002e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f003 021f 	and.w	r2, r3, #31
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <__NVIC_EnableIRQ+0x38>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	095b      	lsrs	r3, r3, #5
 80002dc:	2001      	movs	r0, #1
 80002de:	fa00 f202 	lsl.w	r2, r0, r2
 80002e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	db0a      	blt.n	8000322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	490c      	ldr	r1, [pc, #48]	; (8000344 <__NVIC_SetPriority+0x4c>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	0112      	lsls	r2, r2, #4
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	440b      	add	r3, r1
 800031c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000320:	e00a      	b.n	8000338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4908      	ldr	r1, [pc, #32]	; (8000348 <__NVIC_SetPriority+0x50>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	f003 030f 	and.w	r3, r3, #15
 800032e:	3b04      	subs	r3, #4
 8000330:	0112      	lsls	r2, r2, #4
 8000332:	b2d2      	uxtb	r2, r2
 8000334:	440b      	add	r3, r1
 8000336:	761a      	strb	r2, [r3, #24]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000e100 	.word	0xe000e100
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034c:	b480      	push	{r7}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	f1c3 0307 	rsb	r3, r3, #7
 8000366:	2b04      	cmp	r3, #4
 8000368:	bf28      	it	cs
 800036a:	2304      	movcs	r3, #4
 800036c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3304      	adds	r3, #4
 8000372:	2b06      	cmp	r3, #6
 8000374:	d902      	bls.n	800037c <NVIC_EncodePriority+0x30>
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3b03      	subs	r3, #3
 800037a:	e000      	b.n	800037e <NVIC_EncodePriority+0x32>
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000380:	f04f 32ff 	mov.w	r2, #4294967295
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	43da      	mvns	r2, r3
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	401a      	ands	r2, r3
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000394:	f04f 31ff 	mov.w	r1, #4294967295
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43d9      	mvns	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a4:	4313      	orrs	r3, r2
         );
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3724      	adds	r7, #36	; 0x24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003be:	695a      	ldr	r2, [r3, #20]
 80003c0:	4907      	ldr	r1, [pc, #28]	; (80003e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003ca:	695a      	ldr	r2, [r3, #20]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4013      	ands	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003d2:	68fb      	ldr	r3, [r7, #12]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000

080003e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f7ff ffe3 	bl	80003b4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80003ee:	f7ff ff57 	bl	80002a0 <__NVIC_GetPriorityGrouping>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2200      	movs	r2, #0
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ffa7 	bl	800034c <NVIC_EncodePriority>
 80003fe:	4603      	mov	r3, r0
 8000400:	4619      	mov	r1, r3
 8000402:	2010      	movs	r0, #16
 8000404:	f7ff ff78 	bl	80002f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000408:	2010      	movs	r0, #16
 800040a:	f7ff ff57 	bl	80002bc <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800040e:	f7ff ff47 	bl	80002a0 <__NVIC_GetPriorityGrouping>
 8000412:	4603      	mov	r3, r0
 8000414:	2200      	movs	r2, #0
 8000416:	2100      	movs	r1, #0
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ff97 	bl	800034c <NVIC_EncodePriority>
 800041e:	4603      	mov	r3, r0
 8000420:	4619      	mov	r1, r3
 8000422:	2011      	movs	r0, #17
 8000424:	f7ff ff68 	bl	80002f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000428:	2011      	movs	r0, #17
 800042a:	f7ff ff47 	bl	80002bc <__NVIC_EnableIRQ>

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <LL_AHB1_GRP1_EnableClock>:
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	4907      	ldr	r1, [pc, #28]	; (8000460 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4313      	orrs	r3, r2
 8000446:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4013      	ands	r3, r2
 8000450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000452:	68fb      	ldr	r3, [r7, #12]
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000

08000464 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000468:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800046c:	f7ff ffe2 	bl	8000434 <LL_AHB1_GRP1_EnableClock>

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}

08000474 <__NVIC_SetPriorityGrouping>:
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f003 0307 	and.w	r3, r3, #7
 8000482:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000490:	4013      	ands	r3, r2
 8000492:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800049c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004a6:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <__NVIC_SetPriorityGrouping+0x44>)
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	60d3      	str	r3, [r2, #12]
}
 80004ac:	bf00      	nop
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	e000ed00 	.word	0xe000ed00

080004bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <LL_RCC_HSI_Enable+0x1c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <LL_RCC_HSI_Enable+0x1c>)
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6013      	str	r3, [r2, #0]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000

080004dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <LL_RCC_HSI_IsReady+0x20>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f003 0302 	and.w	r3, r3, #2
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	bf0c      	ite	eq
 80004ec:	2301      	moveq	r3, #1
 80004ee:	2300      	movne	r3, #0
 80004f0:	b2db      	uxtb	r3, r3
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000

08000500 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4904      	ldr	r1, [pc, #16]	; (8000528 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000516:	4313      	orrs	r3, r2
 8000518:	600b      	str	r3, [r1, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <LL_RCC_SetSysClkSource+0x24>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	f023 0203 	bic.w	r2, r3, #3
 800053c:	4904      	ldr	r1, [pc, #16]	; (8000550 <LL_RCC_SetSysClkSource+0x24>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4313      	orrs	r3, r2
 8000542:	604b      	str	r3, [r1, #4]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <LL_RCC_GetSysClkSource+0x18>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f003 030c 	and.w	r3, r3, #12
}
 8000560:	4618      	mov	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LL_RCC_SetAHBPrescaler+0x24>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000580:	4904      	ldr	r1, [pc, #16]	; (8000594 <LL_RCC_SetAHBPrescaler+0x24>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4313      	orrs	r3, r2
 8000586:	604b      	str	r3, [r1, #4]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000

08000598 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80005a8:	4904      	ldr	r1, [pc, #16]	; (80005bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	604b      	str	r3, [r1, #4]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005d0:	4904      	ldr	r1, [pc, #16]	; (80005e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	604b      	str	r3, [r1, #4]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000

080005e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005fe:	69da      	ldr	r2, [r3, #28]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4013      	ands	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000

08000618 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 800062e:	699a      	ldr	r2, [r3, #24]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4013      	ands	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000

08000648 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <LL_FLASH_SetLatency+0x24>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f023 0207 	bic.w	r2, r3, #7
 8000658:	4904      	ldr	r1, [pc, #16]	; (800066c <LL_FLASH_SetLatency+0x24>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4313      	orrs	r3, r2
 800065e:	600b      	str	r3, [r1, #0]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40022000 	.word	0x40022000

08000670 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <LL_FLASH_GetLatency+0x18>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 0307 	and.w	r3, r3, #7
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40022000 	.word	0x40022000

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

   LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000692:	2001      	movs	r0, #1
 8000694:	f7ff ffc0 	bl	8000618 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000698:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800069c:	f7ff ffa4 	bl	80005e8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f7ff fee7 	bl	8000474 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f845 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f7ff fedb 	bl	8000464 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ae:	f7ff fe99 	bl	80003e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006b2:	f001 f8dd 	bl	8001870 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006b6:	f000 fc6f 	bl	8000f98 <MX_TIM2_Init>
  USART2_RegisterCallback(processDMAData);
 80006ba:	481a      	ldr	r0, [pc, #104]	; (8000724 <main+0x98>)
 80006bc:	f001 f8c6 	bl	800184c <USART2_RegisterCallback>
  /* USER CODE BEGIN 2 */

  uint8_t c[] = "mode: %d\n\r";
 80006c0:	4a19      	ldr	r2, [pc, #100]	; (8000728 <main+0x9c>)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006c6:	c303      	stmia	r3!, {r0, r1}
 80006c8:	801a      	strh	r2, [r3, #0]
 80006ca:	3302      	adds	r3, #2
 80006cc:	0c12      	lsrs	r2, r2, #16
 80006ce:	701a      	strb	r2, [r3, #0]
  uint8_t number = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t length = strlen("mode: \n\r") + snprintf( NULL, 0, "%d", mode_auto);
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <main+0xa0>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <main+0xa4>)
 80006da:	2100      	movs	r1, #0
 80006dc:	2000      	movs	r0, #0
 80006de:	f002 fb79 	bl	8002dd4 <sniprintf>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	3308      	adds	r3, #8
 80006e8:	75bb      	strb	r3, [r7, #22]
	  uint8_t *text = (uint8_t *) malloc(length + 1);
 80006ea:	7dbb      	ldrb	r3, [r7, #22]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 faa8 	bl	8002c44 <malloc>
 80006f4:	4603      	mov	r3, r0
 80006f6:	613b      	str	r3, [r7, #16]
	  snprintf(text, length + 1, c, mode_auto);
 80006f8:	7dbb      	ldrb	r3, [r7, #22]
 80006fa:	3301      	adds	r3, #1
 80006fc:	4619      	mov	r1, r3
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <main+0xa0>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	1d3a      	adds	r2, r7, #4
 8000704:	6938      	ldr	r0, [r7, #16]
 8000706:	f002 fb65 	bl	8002dd4 <sniprintf>

	//USART2_CheckDmaReception();
	USART2_PutBuffer(text, length+1);
 800070a:	7dbb      	ldrb	r3, [r7, #22]
 800070c:	3301      	adds	r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	4619      	mov	r1, r3
 8000712:	6938      	ldr	r0, [r7, #16]
 8000714:	f001 f992 	bl	8001a3c <USART2_PutBuffer>
	/* USER CODE BEGIN 3 */
	LL_mDelay(10000);
 8000718:	f242 7010 	movw	r0, #10000	; 0x2710
 800071c:	f002 fa34 	bl	8002b88 <LL_mDelay>
  {
 8000720:	e7d8      	b.n	80006d4 <main+0x48>
 8000722:	bf00      	nop
 8000724:	08000799 	.word	0x08000799
 8000728:	080034d8 	.word	0x080034d8
 800072c:	20000004 	.word	0x20000004
 8000730:	080034d4 	.word	0x080034d4

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ff85 	bl	8000648 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800073e:	bf00      	nop
 8000740:	f7ff ff96 	bl	8000670 <LL_FLASH_GetLatency>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1fa      	bne.n	8000740 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800074a:	f7ff feb7 	bl	80004bc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800074e:	bf00      	nop
 8000750:	f7ff fec4 	bl	80004dc <LL_RCC_HSI_IsReady>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d1fa      	bne.n	8000750 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800075a:	2010      	movs	r0, #16
 800075c:	f7ff fed0 	bl	8000500 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff05 	bl	8000570 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff16 	bl	8000598 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff ff27 	bl	80005c0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff feda 	bl	800052c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000778:	bf00      	nop
 800077a:	f7ff feeb 	bl	8000554 <LL_RCC_GetSysClkSource>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1fa      	bne.n	800077a <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <SystemClock_Config+0x60>)
 8000786:	f002 f9f1 	bl	8002b6c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800078a:	4802      	ldr	r0, [pc, #8]	; (8000794 <SystemClock_Config+0x60>)
 800078c:	f002 fa20 	bl	8002bd0 <LL_SetSystemCoreClock>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	007a1200 	.word	0x007a1200

08000798 <processDMAData>:

/* USER CODE BEGIN 4 */
void processDMAData(const uint8_t *data, uint8_t length){
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]

	uint8_t *cmd_auto = "auto";
 80007a4:	4b38      	ldr	r3, [pc, #224]	; (8000888 <processDMAData+0xf0>)
 80007a6:	61bb      	str	r3, [r7, #24]
	uint8_t *cmd_manual = "manual";
 80007a8:	4b38      	ldr	r3, [pc, #224]	; (800088c <processDMAData+0xf4>)
 80007aa:	617b      	str	r3, [r7, #20]
	uint8_t *cmd_pwm = "PWM";
 80007ac:	4b38      	ldr	r3, [pc, #224]	; (8000890 <processDMAData+0xf8>)
 80007ae:	613b      	str	r3, [r7, #16]

	    if (data[0] == '$' && data[length - 2] == '$'){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b24      	cmp	r3, #36	; 0x24
 80007b6:	d163      	bne.n	8000880 <processDMAData+0xe8>
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	3b02      	subs	r3, #2
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b24      	cmp	r3, #36	; 0x24
 80007c4:	d15c      	bne.n	8000880 <processDMAData+0xe8>

	        uint8_t *temp_data = (uint8_t *) malloc(length - 3);
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 fa3a 	bl	8002c44 <malloc>
 80007d0:	4603      	mov	r3, r0
 80007d2:	60fb      	str	r3, [r7, #12]

	        for (uint8_t i = 0; i < (length - 3); i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	77fb      	strb	r3, [r7, #31]
 80007d8:	e00b      	b.n	80007f2 <processDMAData+0x5a>
	            temp_data[i] = data[i + 1];
 80007da:	7ffb      	ldrb	r3, [r7, #31]
 80007dc:	3301      	adds	r3, #1
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	441a      	add	r2, r3
 80007e2:	7ffb      	ldrb	r3, [r7, #31]
 80007e4:	68f9      	ldr	r1, [r7, #12]
 80007e6:	440b      	add	r3, r1
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	701a      	strb	r2, [r3, #0]
	        for (uint8_t i = 0; i < (length - 3); i++){
 80007ec:	7ffb      	ldrb	r3, [r7, #31]
 80007ee:	3301      	adds	r3, #1
 80007f0:	77fb      	strb	r3, [r7, #31]
 80007f2:	7ffa      	ldrb	r2, [r7, #31]
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	3b03      	subs	r3, #3
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbee      	blt.n	80007da <processDMAData+0x42>
	        }

	        temp_data[length -3] = '\0';
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	3b03      	subs	r3, #3
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]

	        if (strcmp(cmd_auto, temp_data) == 0){
 8000808:	68f9      	ldr	r1, [r7, #12]
 800080a:	69b8      	ldr	r0, [r7, #24]
 800080c:	f7ff fce0 	bl	80001d0 <strcmp>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d103      	bne.n	800081e <processDMAData+0x86>
	            mode_auto = 1;
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <processDMAData+0xfc>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	e009      	b.n	8000832 <processDMAData+0x9a>
	        }
	        else if (strcmp(cmd_manual, temp_data) == 0){
 800081e:	68f9      	ldr	r1, [r7, #12]
 8000820:	6978      	ldr	r0, [r7, #20]
 8000822:	f7ff fcd5 	bl	80001d0 <strcmp>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <processDMAData+0x9a>
	            mode_auto = 0;
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <processDMAData+0xfc>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
	        }

	        if (!mode_auto && strlen(temp_data) == 5 && strncmp(cmd_pwm, temp_data, 3)==0){
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <processDMAData+0xfc>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d122      	bne.n	8000880 <processDMAData+0xe8>
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f7ff fcd2 	bl	80001e4 <strlen>
 8000840:	4603      	mov	r3, r0
 8000842:	2b05      	cmp	r3, #5
 8000844:	d11c      	bne.n	8000880 <processDMAData+0xe8>
 8000846:	2203      	movs	r2, #3
 8000848:	68f9      	ldr	r1, [r7, #12]
 800084a:	6938      	ldr	r0, [r7, #16]
 800084c:	f002 faf6 	bl	8002e3c <strncmp>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d114      	bne.n	8000880 <processDMAData+0xe8>
	                        uint8_t decimals = temp_data[3]-48;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3303      	adds	r3, #3
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	3b30      	subs	r3, #48	; 0x30
 800085e:	72fb      	strb	r3, [r7, #11]
	                        uint8_t ones = temp_data[4]-48;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3304      	adds	r3, #4
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3b30      	subs	r3, #48	; 0x30
 8000868:	72bb      	strb	r3, [r7, #10]
	                        setDutyCycle(decimals*10 + ones);
 800086a:	7afa      	ldrb	r2, [r7, #11]
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	461a      	mov	r2, r3
 8000876:	7abb      	ldrb	r3, [r7, #10]
 8000878:	4413      	add	r3, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fc52 	bl	8001124 <setDutyCycle>
	        }
	    }
}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	080034e4 	.word	0x080034e4
 800088c:	080034ec 	.word	0x080034ec
 8000890:	080034f4 	.word	0x080034f4
 8000894:	20000004 	.word	0x20000004

08000898 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <LL_DMA_DisableChannel+0x3c>)
 80008a8:	5cd3      	ldrb	r3, [r2, r3]
 80008aa:	461a      	mov	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	3a01      	subs	r2, #1
 80008b6:	4907      	ldr	r1, [pc, #28]	; (80008d4 <LL_DMA_DisableChannel+0x3c>)
 80008b8:	5c8a      	ldrb	r2, [r1, r2]
 80008ba:	4611      	mov	r1, r2
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	440a      	add	r2, r1
 80008c0:	f023 0301 	bic.w	r3, r3, #1
 80008c4:	6013      	str	r3, [r2, #0]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	080034f8 	.word	0x080034f8

080008d8 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80008ec:	bf0c      	ite	eq
 80008ee:	2301      	moveq	r3, #1
 80008f0:	2300      	movne	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000914:	bf0c      	ite	eq
 8000916:	2301      	moveq	r3, #1
 8000918:	2300      	movne	r3, #0
 800091a:	b2db      	uxtb	r3, r3
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800093c:	bf0c      	ite	eq
 800093e:	2301      	moveq	r3, #1
 8000940:	2300      	movne	r3, #0
 8000942:	b2db      	uxtb	r3, r3
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800095e:	605a      	str	r2, [r3, #4]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800097a:	605a      	str	r2, [r3, #4]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000996:	605a      	str	r2, [r3, #4]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f06f 0201 	mvn.w	r2, #1
 80009b2:	611a      	str	r2, [r3, #16]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	691b      	ldr	r3, [r3, #16]
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d101      	bne.n	80009d8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80009d4:	2301      	movs	r3, #1
 80009d6:	e000      	b.n	80009da <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	2b10      	cmp	r3, #16
 80009f8:	d101      	bne.n	80009fe <LL_USART_IsActiveFlag_IDLE+0x18>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <LL_USART_IsActiveFlag_IDLE+0x1a>
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1c:	2b40      	cmp	r3, #64	; 0x40
 8000a1e:	d101      	bne.n	8000a24 <LL_USART_IsActiveFlag_TC+0x18>
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <LL_USART_IsActiveFlag_TC+0x1a>
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2210      	movs	r2, #16
 8000a3e:	621a      	str	r2, [r3, #32]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 8000aa6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000aaa:	f7ff ff89 	bl	80009c0 <LL_TIM_IsActiveFlag_UPDATE>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d005      	beq.n	8000ac0 <TIM2_IRQHandler+0x1e>
		        TIM2_ProcessPWM();
 8000ab4:	f000 fb02 	bl	80010bc <TIM2_ProcessPWM>
		        LL_TIM_ClearFlag_UPDATE(TIM2);
 8000ab8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000abc:	f7ff ff72 	bl	80009a4 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <DMA1_Channel6_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */

void DMA1_Channel6_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <DMA1_Channel6_IRQHandler+0x38>)
 8000aca:	f7ff ff05 	bl	80008d8 <LL_DMA_IsActiveFlag_TC6>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d105      	bne.n	8000ae0 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8000ad4:	f000 ffd2 	bl	8001a7c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000ad8:	4808      	ldr	r0, [pc, #32]	; (8000afc <DMA1_Channel6_IRQHandler+0x38>)
 8000ada:	f7ff ff39 	bl	8000950 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8000ade:	e00a      	b.n	8000af6 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8000ae0:	4806      	ldr	r0, [pc, #24]	; (8000afc <DMA1_Channel6_IRQHandler+0x38>)
 8000ae2:	f7ff ff21 	bl	8000928 <LL_DMA_IsActiveFlag_HT6>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d104      	bne.n	8000af6 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8000aec:	f000 ffc6 	bl	8001a7c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <DMA1_Channel6_IRQHandler+0x38>)
 8000af2:	f7ff ff49 	bl	8000988 <LL_DMA_ClearFlag_HT6>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40020000 	.word	0x40020000

08000b00 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8000b04:	480a      	ldr	r0, [pc, #40]	; (8000b30 <DMA1_Channel7_IRQHandler+0x30>)
 8000b06:	f7ff fefb 	bl	8000900 <LL_DMA_IsActiveFlag_TC7>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d10d      	bne.n	8000b2c <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8000b10:	4807      	ldr	r0, [pc, #28]	; (8000b30 <DMA1_Channel7_IRQHandler+0x30>)
 8000b12:	f7ff ff2b 	bl	800096c <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8000b16:	bf00      	nop
 8000b18:	4806      	ldr	r0, [pc, #24]	; (8000b34 <DMA1_Channel7_IRQHandler+0x34>)
 8000b1a:	f7ff ff77 	bl	8000a0c <LL_USART_IsActiveFlag_TC>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0f9      	beq.n	8000b18 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000b24:	2107      	movs	r1, #7
 8000b26:	4802      	ldr	r0, [pc, #8]	; (8000b30 <DMA1_Channel7_IRQHandler+0x30>)
 8000b28:	f7ff feb6 	bl	8000898 <LL_DMA_DisableChannel>
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40004400 	.word	0x40004400

08000b38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <USART2_IRQHandler+0x20>)
 8000b3e:	f7ff ff52 	bl	80009e6 <LL_USART_IsActiveFlag_IDLE>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d004      	beq.n	8000b52 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8000b48:	f000 ff98 	bl	8001a7c <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <USART2_IRQHandler+0x20>)
 8000b4e:	f7ff ff70 	bl	8000a32 <LL_USART_ClearFlag_IDLE>
	}
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40004400 	.word	0x40004400

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f002 f830 	bl	8002bf0 <__errno>
 8000b90:	4602      	mov	r2, r0
 8000b92:	230c      	movs	r3, #12
 8000b94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20003000 	.word	0x20003000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	20000088 	.word	0x20000088
 8000bc4:	200001a8 	.word	0x200001a8

08000bc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <LL_AHB1_GRP1_EnableClock>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d0a:	695a      	ldr	r2, [r3, #20]
 8000d0c:	4907      	ldr	r1, [pc, #28]	; (8000d2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d16:	695a      	ldr	r2, [r3, #20]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000

08000d30 <LL_APB1_GRP1_EnableClock>:
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d3a:	69da      	ldr	r2, [r3, #28]
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d46:	69da      	ldr	r2, [r3, #28]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000

08000d60 <LL_TIM_EnableCounter>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f043 0201 	orr.w	r2, r3, #1
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	601a      	str	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_TIM_EnableARRPreload>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	601a      	str	r2, [r3, #0]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <LL_TIM_CC_EnableChannel>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a1a      	ldr	r2, [r3, #32]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	621a      	str	r2, [r3, #32]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <LL_TIM_OC_DisableFast>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d028      	beq.n	8000e26 <LL_TIM_OC_DisableFast+0x62>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d023      	beq.n	8000e22 <LL_TIM_OC_DisableFast+0x5e>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2b10      	cmp	r3, #16
 8000dde:	d01e      	beq.n	8000e1e <LL_TIM_OC_DisableFast+0x5a>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	2b40      	cmp	r3, #64	; 0x40
 8000de4:	d019      	beq.n	8000e1a <LL_TIM_OC_DisableFast+0x56>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dec:	d013      	beq.n	8000e16 <LL_TIM_OC_DisableFast+0x52>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000df4:	d00d      	beq.n	8000e12 <LL_TIM_OC_DisableFast+0x4e>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dfc:	d007      	beq.n	8000e0e <LL_TIM_OC_DisableFast+0x4a>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	d101      	bne.n	8000e0a <LL_TIM_OC_DisableFast+0x46>
 8000e06:	2307      	movs	r3, #7
 8000e08:	e00e      	b.n	8000e28 <LL_TIM_OC_DisableFast+0x64>
 8000e0a:	2308      	movs	r3, #8
 8000e0c:	e00c      	b.n	8000e28 <LL_TIM_OC_DisableFast+0x64>
 8000e0e:	2306      	movs	r3, #6
 8000e10:	e00a      	b.n	8000e28 <LL_TIM_OC_DisableFast+0x64>
 8000e12:	2305      	movs	r3, #5
 8000e14:	e008      	b.n	8000e28 <LL_TIM_OC_DisableFast+0x64>
 8000e16:	2304      	movs	r3, #4
 8000e18:	e006      	b.n	8000e28 <LL_TIM_OC_DisableFast+0x64>
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e004      	b.n	8000e28 <LL_TIM_OC_DisableFast+0x64>
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e002      	b.n	8000e28 <LL_TIM_OC_DisableFast+0x64>
 8000e22:	2301      	movs	r3, #1
 8000e24:	e000      	b.n	8000e28 <LL_TIM_OC_DisableFast+0x64>
 8000e26:	2300      	movs	r3, #0
 8000e28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3318      	adds	r3, #24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <LL_TIM_OC_DisableFast+0x9c>)
 8000e34:	5cd3      	ldrb	r3, [r2, r3]
 8000e36:	440b      	add	r3, r1
 8000e38:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	4908      	ldr	r1, [pc, #32]	; (8000e64 <LL_TIM_OC_DisableFast+0xa0>)
 8000e42:	5ccb      	ldrb	r3, [r1, r3]
 8000e44:	4619      	mov	r1, r3
 8000e46:	2304      	movs	r3, #4
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	08003518 	.word	0x08003518
 8000e64:	08003524 	.word	0x08003524

08000e68 <LL_TIM_OC_EnablePreload>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d028      	beq.n	8000eca <LL_TIM_OC_EnablePreload+0x62>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d023      	beq.n	8000ec6 <LL_TIM_OC_EnablePreload+0x5e>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b10      	cmp	r3, #16
 8000e82:	d01e      	beq.n	8000ec2 <LL_TIM_OC_EnablePreload+0x5a>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2b40      	cmp	r3, #64	; 0x40
 8000e88:	d019      	beq.n	8000ebe <LL_TIM_OC_EnablePreload+0x56>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e90:	d013      	beq.n	8000eba <LL_TIM_OC_EnablePreload+0x52>
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e98:	d00d      	beq.n	8000eb6 <LL_TIM_OC_EnablePreload+0x4e>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ea0:	d007      	beq.n	8000eb2 <LL_TIM_OC_EnablePreload+0x4a>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea8:	d101      	bne.n	8000eae <LL_TIM_OC_EnablePreload+0x46>
 8000eaa:	2307      	movs	r3, #7
 8000eac:	e00e      	b.n	8000ecc <LL_TIM_OC_EnablePreload+0x64>
 8000eae:	2308      	movs	r3, #8
 8000eb0:	e00c      	b.n	8000ecc <LL_TIM_OC_EnablePreload+0x64>
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	e00a      	b.n	8000ecc <LL_TIM_OC_EnablePreload+0x64>
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	e008      	b.n	8000ecc <LL_TIM_OC_EnablePreload+0x64>
 8000eba:	2304      	movs	r3, #4
 8000ebc:	e006      	b.n	8000ecc <LL_TIM_OC_EnablePreload+0x64>
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e004      	b.n	8000ecc <LL_TIM_OC_EnablePreload+0x64>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <LL_TIM_OC_EnablePreload+0x64>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <LL_TIM_OC_EnablePreload+0x64>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3318      	adds	r3, #24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <LL_TIM_OC_EnablePreload+0x98>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	440b      	add	r3, r1
 8000edc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <LL_TIM_OC_EnablePreload+0x9c>)
 8000ee6:	5ccb      	ldrb	r3, [r1, r3]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2308      	movs	r3, #8
 8000eec:	408b      	lsls	r3, r1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	08003518 	.word	0x08003518
 8000f04:	08003524 	.word	0x08003524

08000f08 <LL_TIM_SetClockSource>:
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000f1a:	f023 0307 	bic.w	r3, r3, #7
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	609a      	str	r2, [r3, #8]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <LL_TIM_SetTriggerOutput>:
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	605a      	str	r2, [r3, #4]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_TIM_DisableMasterSlaveMode>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	f043 0201 	orr.w	r2, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	60da      	str	r2, [r3, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fe4c 	bl	8002c54 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff feaf 	bl	8000d30 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fd2:	f7ff fe0b 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fe5b 	bl	8000c98 <NVIC_EncodePriority>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	201c      	movs	r0, #28
 8000fe8:	f7ff fe2c 	bl	8000c44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000fec:	201c      	movs	r0, #28
 8000fee:	f7ff fe0b 	bl	8000c08 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 7999;
 8000ff2:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000ff6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 9;
 8000ffc:	2309      	movs	r3, #9
 8000ffe:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001004:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800100e:	f001 f95f 	bl	80022d0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8001012:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001016:	f7ff feb3 	bl	8000d80 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800101a:	2100      	movs	r1, #0
 800101c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001020:	f7ff ff72 	bl	8000f08 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001024:	2101      	movs	r1, #1
 8001026:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800102a:	f7ff ff1d 	bl	8000e68 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800102e:	2360      	movs	r3, #96	; 0x60
 8001030:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	461a      	mov	r2, r3
 8001048:	2101      	movs	r1, #1
 800104a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800104e:	f001 f9b1 	bl	80023b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001052:	2101      	movs	r1, #1
 8001054:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001058:	f7ff feb4 	bl	8000dc4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800105c:	2100      	movs	r1, #0
 800105e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001062:	f7ff ff66 	bl	8000f32 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001066:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800106a:	f7ff ff75 	bl	8000f58 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800106e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001072:	f7ff fe45 	bl	8000d00 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001076:	2320      	movs	r3, #32
 8001078:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800107a:	2302      	movs	r3, #2
 800107c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f000 fe7b 	bl	8001d90 <LL_GPIO_Init>
  LL_TIM_EnableIT_UPDATE(TIM2);
 800109a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800109e:	f7ff ff6b 	bl	8000f78 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 80010a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010a6:	f7ff fe5b 	bl	8000d60 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 80010aa:	2101      	movs	r1, #1
 80010ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010b0:	f7ff fe76 	bl	8000da0 <LL_TIM_CC_EnableChannel>
}
 80010b4:	bf00      	nop
 80010b6:	3750      	adds	r7, #80	; 0x50
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <TIM2_ProcessPWM>:

uint8_t mode_auto = 1;

/* USER CODE BEGIN 1 */
void TIM2_ProcessPWM(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0


    static uint8_t led_cycle = 0;
    static uint8_t led_pwm = 0;

    if(mode_auto){
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <TIM2_ProcessPWM+0x5c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d024      	beq.n	8001112 <TIM2_ProcessPWM+0x56>
		if (led_cycle){
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <TIM2_ProcessPWM+0x60>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d010      	beq.n	80010f2 <TIM2_ProcessPWM+0x36>
			setDutyCycle(led_pwm--);
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <TIM2_ProcessPWM+0x64>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	1e5a      	subs	r2, r3, #1
 80010d6:	b2d1      	uxtb	r1, r2
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <TIM2_ProcessPWM+0x64>)
 80010da:	7011      	strb	r1, [r2, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f821 	bl	8001124 <setDutyCycle>
			if (led_pwm <= 0) led_cycle = 0;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <TIM2_ProcessPWM+0x64>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d113      	bne.n	8001112 <TIM2_ProcessPWM+0x56>
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <TIM2_ProcessPWM+0x60>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
		else {
			setDutyCycle(led_pwm++);
			if (led_pwm >= 99) led_cycle = 1;
		}
    }
}
 80010f0:	e00f      	b.n	8001112 <TIM2_ProcessPWM+0x56>
			setDutyCycle(led_pwm++);
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <TIM2_ProcessPWM+0x64>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	b2d1      	uxtb	r1, r2
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <TIM2_ProcessPWM+0x64>)
 80010fc:	7011      	strb	r1, [r2, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f810 	bl	8001124 <setDutyCycle>
			if (led_pwm >= 99) led_cycle = 1;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <TIM2_ProcessPWM+0x64>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b62      	cmp	r3, #98	; 0x62
 800110a:	d902      	bls.n	8001112 <TIM2_ProcessPWM+0x56>
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <TIM2_ProcessPWM+0x60>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000004 	.word	0x20000004
 800111c:	2000008c 	.word	0x2000008c
 8001120:	2000008d 	.word	0x2000008d

08001124 <setDutyCycle>:

void setDutyCycle(uint8_t D){
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	uint8_t pulse_length = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
	pulse_length = ((TIM2->ARR)*D)/100;
 8001132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	fb02 f303 	mul.w	r3, r2, r3
 800113e:	4a07      	ldr	r2, [pc, #28]	; (800115c <setDutyCycle+0x38>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	095b      	lsrs	r3, r3, #5
 8001146:	73fb      	strb	r3, [r7, #15]
	TIM2->CCR1 = pulse_length;
 8001148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	51eb851f 	.word	0x51eb851f

08001160 <__NVIC_EnableIRQ>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db0b      	blt.n	800118a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4907      	ldr	r1, [pc, #28]	; (8001198 <__NVIC_EnableIRQ+0x38>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e100 	.word	0xe000e100

0800119c <__NVIC_SetPriority>:
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <__NVIC_SetPriority+0x50>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	3b04      	subs	r3, #4
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <LL_DMA_EnableChannel>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <LL_DMA_EnableChannel+0x3c>)
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	461a      	mov	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4413      	add	r3, r2
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	3a01      	subs	r2, #1
 800120e:	4907      	ldr	r1, [pc, #28]	; (800122c <LL_DMA_EnableChannel+0x3c>)
 8001210:	5c8a      	ldrb	r2, [r1, r2]
 8001212:	4611      	mov	r1, r2
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	440a      	add	r2, r1
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6013      	str	r3, [r2, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	08003530 	.word	0x08003530

08001230 <LL_DMA_SetDataTransferDirection>:
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	3b01      	subs	r3, #1
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LL_DMA_SetDataTransferDirection+0x48>)
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	461a      	mov	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001250:	f023 0310 	bic.w	r3, r3, #16
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	3a01      	subs	r2, #1
 8001258:	4907      	ldr	r1, [pc, #28]	; (8001278 <LL_DMA_SetDataTransferDirection+0x48>)
 800125a:	5c8a      	ldrb	r2, [r1, r2]
 800125c:	4611      	mov	r1, r2
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	440a      	add	r2, r1
 8001262:	4611      	mov	r1, r2
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	08003530 	.word	0x08003530

0800127c <LL_DMA_GetDataTransferDirection>:
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3b01      	subs	r3, #1
 800128a:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <LL_DMA_GetDataTransferDirection+0x2c>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f244 0310 	movw	r3, #16400	; 0x4010
 800129a:	4013      	ands	r3, r2
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	08003530 	.word	0x08003530

080012ac <LL_DMA_SetMode>:
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <LL_DMA_SetMode+0x44>)
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	461a      	mov	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 0220 	bic.w	r2, r3, #32
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	4907      	ldr	r1, [pc, #28]	; (80012f0 <LL_DMA_SetMode+0x44>)
 80012d2:	5ccb      	ldrb	r3, [r1, r3]
 80012d4:	4619      	mov	r1, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	440b      	add	r3, r1
 80012da:	4619      	mov	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	08003530 	.word	0x08003530

080012f4 <LL_DMA_SetPeriphIncMode>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3b01      	subs	r3, #1
 8001304:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <LL_DMA_SetPeriphIncMode+0x44>)
 8001306:	5cd3      	ldrb	r3, [r2, r3]
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	3b01      	subs	r3, #1
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <LL_DMA_SetPeriphIncMode+0x44>)
 800131a:	5ccb      	ldrb	r3, [r1, r3]
 800131c:	4619      	mov	r1, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	440b      	add	r3, r1
 8001322:	4619      	mov	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	08003530 	.word	0x08003530

0800133c <LL_DMA_SetMemoryIncMode>:
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3b01      	subs	r3, #1
 800134c:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <LL_DMA_SetMemoryIncMode+0x44>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4413      	add	r3, r2
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3b01      	subs	r3, #1
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <LL_DMA_SetMemoryIncMode+0x44>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	4619      	mov	r1, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	440b      	add	r3, r1
 800136a:	4619      	mov	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	08003530 	.word	0x08003530

08001384 <LL_DMA_SetPeriphSize>:
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	3b01      	subs	r3, #1
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <LL_DMA_SetPeriphSize+0x44>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <LL_DMA_SetPeriphSize+0x44>)
 80013aa:	5ccb      	ldrb	r3, [r1, r3]
 80013ac:	4619      	mov	r1, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	440b      	add	r3, r1
 80013b2:	4619      	mov	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	08003530 	.word	0x08003530

080013cc <LL_DMA_SetMemorySize>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	3b01      	subs	r3, #1
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <LL_DMA_SetMemorySize+0x44>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	461a      	mov	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4413      	add	r3, r2
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <LL_DMA_SetMemorySize+0x44>)
 80013f2:	5ccb      	ldrb	r3, [r1, r3]
 80013f4:	4619      	mov	r1, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	440b      	add	r3, r1
 80013fa:	4619      	mov	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	08003530 	.word	0x08003530

08001414 <LL_DMA_SetChannelPriorityLevel>:
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3b01      	subs	r3, #1
 8001424:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001426:	5cd3      	ldrb	r3, [r2, r3]
 8001428:	461a      	mov	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	3b01      	subs	r3, #1
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	4619      	mov	r1, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	440b      	add	r3, r1
 8001442:	4619      	mov	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	08003530 	.word	0x08003530

0800145c <LL_DMA_SetDataLength>:
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3b01      	subs	r3, #1
 800146c:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <LL_DMA_SetDataLength+0x44>)
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	461a      	mov	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	0c1b      	lsrs	r3, r3, #16
 800147a:	041b      	lsls	r3, r3, #16
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	3a01      	subs	r2, #1
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <LL_DMA_SetDataLength+0x44>)
 8001482:	5c8a      	ldrb	r2, [r1, r2]
 8001484:	4611      	mov	r1, r2
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	440a      	add	r2, r1
 800148a:	4611      	mov	r1, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	08003530 	.word	0x08003530

080014a4 <LL_DMA_GetDataLength>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	4a06      	ldr	r2, [pc, #24]	; (80014cc <LL_DMA_GetDataLength+0x28>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	461a      	mov	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	b29b      	uxth	r3, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	08003530 	.word	0x08003530

080014d0 <LL_DMA_ConfigAddresses>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b10      	cmp	r3, #16
 80014e2:	d114      	bne.n	800150e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	4a16      	ldr	r2, [pc, #88]	; (8001544 <LL_DMA_ConfigAddresses+0x74>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	461a      	mov	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	4a11      	ldr	r2, [pc, #68]	; (8001544 <LL_DMA_ConfigAddresses+0x74>)
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	461a      	mov	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4413      	add	r3, r2
 8001506:	461a      	mov	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6093      	str	r3, [r2, #8]
}
 800150c:	e013      	b.n	8001536 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3b01      	subs	r3, #1
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <LL_DMA_ConfigAddresses+0x74>)
 8001514:	5cd3      	ldrb	r3, [r2, r3]
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	461a      	mov	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3b01      	subs	r3, #1
 8001526:	4a07      	ldr	r2, [pc, #28]	; (8001544 <LL_DMA_ConfigAddresses+0x74>)
 8001528:	5cd3      	ldrb	r3, [r2, r3]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	461a      	mov	r2, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	60d3      	str	r3, [r2, #12]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	08003530 	.word	0x08003530

08001548 <LL_DMA_SetMemoryAddress>:
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	3b01      	subs	r3, #1
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <LL_DMA_SetMemoryAddress+0x2c>)
 800155a:	5cd3      	ldrb	r3, [r2, r3]
 800155c:	461a      	mov	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	461a      	mov	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	08003530 	.word	0x08003530

08001578 <LL_DMA_SetPeriphAddress>:
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3b01      	subs	r3, #1
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <LL_DMA_SetPeriphAddress+0x2c>)
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	461a      	mov	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6093      	str	r3, [r2, #8]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	08003530 	.word	0x08003530

080015a8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <LL_DMA_EnableIT_TC+0x3c>)
 80015b8:	5cd3      	ldrb	r3, [r2, r3]
 80015ba:	461a      	mov	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	3a01      	subs	r2, #1
 80015c6:	4907      	ldr	r1, [pc, #28]	; (80015e4 <LL_DMA_EnableIT_TC+0x3c>)
 80015c8:	5c8a      	ldrb	r2, [r1, r2]
 80015ca:	4611      	mov	r1, r2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	440a      	add	r2, r1
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6013      	str	r3, [r2, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	08003530 	.word	0x08003530

080015e8 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LL_DMA_EnableIT_HT+0x3c>)
 80015f8:	5cd3      	ldrb	r3, [r2, r3]
 80015fa:	461a      	mov	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	3a01      	subs	r2, #1
 8001606:	4907      	ldr	r1, [pc, #28]	; (8001624 <LL_DMA_EnableIT_HT+0x3c>)
 8001608:	5c8a      	ldrb	r2, [r1, r2]
 800160a:	4611      	mov	r1, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	440a      	add	r2, r1
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6013      	str	r3, [r2, #0]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	08003530 	.word	0x08003530

08001628 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3b01      	subs	r3, #1
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <LL_DMA_EnableIT_TE+0x3c>)
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	3a01      	subs	r2, #1
 8001646:	4907      	ldr	r1, [pc, #28]	; (8001664 <LL_DMA_EnableIT_TE+0x3c>)
 8001648:	5c8a      	ldrb	r2, [r1, r2]
 800164a:	4611      	mov	r1, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	440a      	add	r2, r1
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6013      	str	r3, [r2, #0]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	08003530 	.word	0x08003530

08001668 <LL_AHB1_GRP1_EnableClock>:
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000

08001698 <LL_APB1_GRP1_EnableClock>:
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ae:	69da      	ldr	r2, [r3, #28]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4013      	ands	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000

080016c8 <LL_USART_Enable>:
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_USART_ConfigAsyncMode>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	609a      	str	r2, [r3, #8]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	e853 3f00 	ldrex	r3, [r3]
 8001726:	60bb      	str	r3, [r7, #8]
   return(result);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	61ba      	str	r2, [r7, #24]
 8001736:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001738:	6979      	ldr	r1, [r7, #20]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	e841 2300 	strex	r3, r2, [r1]
 8001740:	613b      	str	r3, [r7, #16]
   return(result);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1e9      	bne.n	800171c <LL_USART_EnableIT_IDLE+0x8>
}
 8001748:	bf00      	nop
 800174a:	3724      	adds	r7, #36	; 0x24
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3308      	adds	r3, #8
 8001760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	e853 3f00 	ldrex	r3, [r3]
 8001768:	60bb      	str	r3, [r7, #8]
   return(result);
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3308      	adds	r3, #8
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	61ba      	str	r2, [r7, #24]
 800177a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800177c:	6979      	ldr	r1, [r7, #20]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	e841 2300 	strex	r3, r2, [r1]
 8001784:	613b      	str	r3, [r7, #16]
   return(result);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e7      	bne.n	800175c <LL_USART_DisableIT_CTS+0x8>
}
 800178c:	bf00      	nop
 800178e:	3724      	adds	r7, #36	; 0x24
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3308      	adds	r3, #8
 80017a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	e853 3f00 	ldrex	r3, [r3]
 80017ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3308      	adds	r3, #8
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	61ba      	str	r2, [r7, #24]
 80017be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017c0:	6979      	ldr	r1, [r7, #20]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	e841 2300 	strex	r3, r2, [r1]
 80017c8:	613b      	str	r3, [r7, #16]
   return(result);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1e7      	bne.n	80017a0 <LL_USART_EnableDMAReq_RX+0x8>
}
 80017d0:	bf00      	nop
 80017d2:	3724      	adds	r7, #36	; 0x24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3308      	adds	r3, #8
 80017e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	e853 3f00 	ldrex	r3, [r3]
 80017f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3308      	adds	r3, #8
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	61ba      	str	r2, [r7, #24]
 8001802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001804:	6979      	ldr	r1, [r7, #20]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	e841 2300 	strex	r3, r2, [r1]
 800180c:	613b      	str	r3, [r7, #16]
   return(result);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e7      	bne.n	80017e4 <LL_USART_EnableDMAReq_TX+0x8>
}
 8001814:	bf00      	nop
 8001816:	3724      	adds	r7, #36	; 0x24
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d103      	bne.n	8001838 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3328      	adds	r3, #40	; 0x28
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e002      	b.n	800183e <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3324      	adds	r3, #36	; 0x24
 800183c:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t *data, uint8_t length) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a03      	ldr	r2, [pc, #12]	; (800186c <USART2_RegisterCallback+0x20>)
 800185e:	6013      	str	r3, [r2, #0]
	}
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	20000090 	.word	0x20000090

08001870 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b090      	sub	sp, #64	; 0x40
 8001874:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
 8001898:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800189a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800189e:	f7ff fefb 	bl	8001698 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018a6:	f7ff fedf 	bl	8001668 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80018aa:	f248 0304 	movw	r3, #32772	; 0x8004
 80018ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018b0:	2302      	movs	r3, #2
 80018b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80018c0:	2307      	movs	r3, #7
 80018c2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018cc:	f000 fa60 	bl	8001d90 <LL_GPIO_Init>
   */

  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2106      	movs	r1, #6
 80018d4:	4856      	ldr	r0, [pc, #344]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 80018d6:	f7ff fcab 	bl	8001230 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80018da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018de:	2106      	movs	r1, #6
 80018e0:	4853      	ldr	r0, [pc, #332]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 80018e2:	f7ff fd97 	bl	8001414 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 80018e6:	2220      	movs	r2, #32
 80018e8:	2106      	movs	r1, #6
 80018ea:	4851      	ldr	r0, [pc, #324]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 80018ec:	f7ff fcde 	bl	80012ac <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2106      	movs	r1, #6
 80018f4:	484e      	ldr	r0, [pc, #312]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 80018f6:	f7ff fcfd 	bl	80012f4 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	2106      	movs	r1, #6
 80018fe:	484c      	ldr	r0, [pc, #304]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 8001900:	f7ff fd1c 	bl	800133c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001904:	2200      	movs	r2, #0
 8001906:	2106      	movs	r1, #6
 8001908:	4849      	ldr	r0, [pc, #292]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 800190a:	f7ff fd3b 	bl	8001384 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800190e:	2200      	movs	r2, #0
 8001910:	2106      	movs	r1, #6
 8001912:	4847      	ldr	r0, [pc, #284]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 8001914:	f7ff fd5a 	bl	80013cc <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8001918:	2101      	movs	r1, #1
 800191a:	4846      	ldr	r0, [pc, #280]	; (8001a34 <MX_USART2_UART_Init+0x1c4>)
 800191c:	f7ff ff80 	bl	8001820 <LL_USART_DMA_GetRegAddr>
 8001920:	4605      	mov	r5, r0
 8001922:	4c45      	ldr	r4, [pc, #276]	; (8001a38 <MX_USART2_UART_Init+0x1c8>)
 8001924:	2106      	movs	r1, #6
 8001926:	4842      	ldr	r0, [pc, #264]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 8001928:	f7ff fca8 	bl	800127c <LL_DMA_GetDataTransferDirection>
 800192c:	4603      	mov	r3, r0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	4623      	mov	r3, r4
 8001932:	462a      	mov	r2, r5
 8001934:	2106      	movs	r1, #6
 8001936:	483e      	ldr	r0, [pc, #248]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 8001938:	f7ff fdca 	bl	80014d0 <LL_DMA_ConfigAddresses>
		  LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
		  (uint32_t)bufferUSART2dma,
		  LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800193c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001940:	2106      	movs	r1, #6
 8001942:	483b      	ldr	r0, [pc, #236]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 8001944:	f7ff fd8a 	bl	800145c <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001948:	2106      	movs	r1, #6
 800194a:	4839      	ldr	r0, [pc, #228]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 800194c:	f7ff fc50 	bl	80011f0 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8001950:	4838      	ldr	r0, [pc, #224]	; (8001a34 <MX_USART2_UART_Init+0x1c4>)
 8001952:	f7ff ff21 	bl	8001798 <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001956:	2106      	movs	r1, #6
 8001958:	4835      	ldr	r0, [pc, #212]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 800195a:	f7ff fe25 	bl	80015a8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 800195e:	2106      	movs	r1, #6
 8001960:	4833      	ldr	r0, [pc, #204]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 8001962:	f7ff fe41 	bl	80015e8 <LL_DMA_EnableIT_HT>


  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001966:	2210      	movs	r2, #16
 8001968:	2107      	movs	r1, #7
 800196a:	4831      	ldr	r0, [pc, #196]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 800196c:	f7ff fc60 	bl	8001230 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001970:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001974:	2107      	movs	r1, #7
 8001976:	482e      	ldr	r0, [pc, #184]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 8001978:	f7ff fd4c 	bl	8001414 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800197c:	2200      	movs	r2, #0
 800197e:	2107      	movs	r1, #7
 8001980:	482b      	ldr	r0, [pc, #172]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 8001982:	f7ff fc93 	bl	80012ac <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001986:	2200      	movs	r2, #0
 8001988:	2107      	movs	r1, #7
 800198a:	4829      	ldr	r0, [pc, #164]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 800198c:	f7ff fcb2 	bl	80012f4 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001990:	2280      	movs	r2, #128	; 0x80
 8001992:	2107      	movs	r1, #7
 8001994:	4826      	ldr	r0, [pc, #152]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 8001996:	f7ff fcd1 	bl	800133c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800199a:	2200      	movs	r2, #0
 800199c:	2107      	movs	r1, #7
 800199e:	4824      	ldr	r0, [pc, #144]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 80019a0:	f7ff fcf0 	bl	8001384 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2107      	movs	r1, #7
 80019a8:	4821      	ldr	r0, [pc, #132]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 80019aa:	f7ff fd0f 	bl	80013cc <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 80019ae:	2100      	movs	r1, #0
 80019b0:	4820      	ldr	r0, [pc, #128]	; (8001a34 <MX_USART2_UART_Init+0x1c4>)
 80019b2:	f7ff ff35 	bl	8001820 <LL_USART_DMA_GetRegAddr>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	2107      	movs	r1, #7
 80019bc:	481c      	ldr	r0, [pc, #112]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 80019be:	f7ff fddb 	bl	8001578 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 80019c2:	481c      	ldr	r0, [pc, #112]	; (8001a34 <MX_USART2_UART_Init+0x1c4>)
 80019c4:	f7ff ff0a 	bl	80017dc <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80019c8:	2107      	movs	r1, #7
 80019ca:	4819      	ldr	r0, [pc, #100]	; (8001a30 <MX_USART2_UART_Init+0x1c0>)
 80019cc:	f7ff fe2c 	bl	8001628 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80019d0:	2100      	movs	r1, #0
 80019d2:	2026      	movs	r0, #38	; 0x26
 80019d4:	f7ff fbe2 	bl	800119c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80019d8:	2026      	movs	r0, #38	; 0x26
 80019da:	f7ff fbc1 	bl	8001160 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80019de:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019e2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80019f0:	230c      	movs	r3, #12
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80019f8:	2300      	movs	r3, #0
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <MX_USART2_UART_Init+0x1c4>)
 8001a04:	f001 f82c 	bl	8002a60 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001a08:	480a      	ldr	r0, [pc, #40]	; (8001a34 <MX_USART2_UART_Init+0x1c4>)
 8001a0a:	f7ff fe6d 	bl	80016e8 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8001a0e:	4809      	ldr	r0, [pc, #36]	; (8001a34 <MX_USART2_UART_Init+0x1c4>)
 8001a10:	f7ff fea0 	bl	8001754 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/

  	  //type your code here:
  LL_USART_EnableIT_IDLE(USART2);
 8001a14:	4807      	ldr	r0, [pc, #28]	; (8001a34 <MX_USART2_UART_Init+0x1c4>)
 8001a16:	f7ff fe7d 	bl	8001714 <LL_USART_EnableIT_IDLE>
  LL_USART_ConfigAsyncMode(USART2);
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <MX_USART2_UART_Init+0x1c4>)
 8001a1c:	f7ff fe64 	bl	80016e8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_USART2_UART_Init+0x1c4>)
 8001a22:	f7ff fe51 	bl	80016c8 <LL_USART_Enable>
}
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	; 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40004400 	.word	0x40004400
 8001a38:	200000a0 	.word	0x200000a0

08001a3c <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2107      	movs	r1, #7
 8001a4e:	480a      	ldr	r0, [pc, #40]	; (8001a78 <USART2_PutBuffer+0x3c>)
 8001a50:	f7ff fd7a 	bl	8001548 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	461a      	mov	r2, r3
 8001a58:	2107      	movs	r1, #7
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <USART2_PutBuffer+0x3c>)
 8001a5c:	f7ff fcfe 	bl	800145c <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8001a60:	2107      	movs	r1, #7
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <USART2_PutBuffer+0x3c>)
 8001a64:	f7ff fda0 	bl	80015a8 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001a68:	2107      	movs	r1, #7
 8001a6a:	4803      	ldr	r0, [pc, #12]	; (8001a78 <USART2_PutBuffer+0x3c>)
 8001a6c:	f7ff fbc0 	bl	80011f0 <LL_DMA_EnableChannel>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40020000 	.word	0x40020000

08001a7c <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
    if(USART2_ProcessData == 0) return;
 8001a82:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <USART2_CheckDmaReception+0xa8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d047      	beq.n	8001b1a <USART2_CheckDmaReception+0x9e>

    static uint16_t old_pos = 0;

    uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8001a8a:	2106      	movs	r1, #6
 8001a8c:	4826      	ldr	r0, [pc, #152]	; (8001b28 <USART2_CheckDmaReception+0xac>)
 8001a8e:	f7ff fd09 	bl	80014a4 <LL_DMA_GetDataLength>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001a9a:	80fb      	strh	r3, [r7, #6]

    if (pos != old_pos)
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <USART2_CheckDmaReception+0xb0>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d02d      	beq.n	8001b02 <USART2_CheckDmaReception+0x86>
    {
        if (pos > old_pos)
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <USART2_CheckDmaReception+0xb0>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	88fa      	ldrh	r2, [r7, #6]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d910      	bls.n	8001ad2 <USART2_CheckDmaReception+0x56>
        {
            USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <USART2_CheckDmaReception+0xa8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <USART2_CheckDmaReception+0xb0>)
 8001ab6:	8812      	ldrh	r2, [r2, #0]
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <USART2_CheckDmaReception+0xb4>)
 8001abc:	1888      	adds	r0, r1, r2
 8001abe:	88fa      	ldrh	r2, [r7, #6]
 8001ac0:	b2d1      	uxtb	r1, r2
 8001ac2:	4a1a      	ldr	r2, [pc, #104]	; (8001b2c <USART2_CheckDmaReception+0xb0>)
 8001ac4:	8812      	ldrh	r2, [r2, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	1a8a      	subs	r2, r1, r2
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	4611      	mov	r1, r2
 8001ace:	4798      	blx	r3
 8001ad0:	e017      	b.n	8001b02 <USART2_CheckDmaReception+0x86>
        }
        else
        {
            USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <USART2_CheckDmaReception+0xa8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <USART2_CheckDmaReception+0xb0>)
 8001ad8:	8812      	ldrh	r2, [r2, #0]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <USART2_CheckDmaReception+0xb4>)
 8001ade:	1888      	adds	r0, r1, r2
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <USART2_CheckDmaReception+0xb0>)
 8001ae2:	8812      	ldrh	r2, [r2, #0]
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	4611      	mov	r1, r2
 8001aec:	4798      	blx	r3

            if (pos > 0)
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <USART2_CheckDmaReception+0x86>
            {
                USART2_ProcessData(&bufferUSART2dma[0], pos);
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <USART2_CheckDmaReception+0xa8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	4611      	mov	r1, r2
 8001afe:	480c      	ldr	r0, [pc, #48]	; (8001b30 <USART2_CheckDmaReception+0xb4>)
 8001b00:	4798      	blx	r3
            }
        }
    }

    old_pos = pos;
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <USART2_CheckDmaReception+0xb0>)
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	8013      	strh	r3, [r2, #0]

    if (old_pos == DMA_USART2_BUFFER_SIZE)
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <USART2_CheckDmaReception+0xb0>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b10:	d104      	bne.n	8001b1c <USART2_CheckDmaReception+0xa0>
    {
        old_pos = 0;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <USART2_CheckDmaReception+0xb0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	801a      	strh	r2, [r3, #0]
 8001b18:	e000      	b.n	8001b1c <USART2_CheckDmaReception+0xa0>
    if(USART2_ProcessData == 0) return;
 8001b1a:	bf00      	nop
    }
}
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000090 	.word	0x20000090
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	20000094 	.word	0x20000094
 8001b30:	200000a0 	.word	0x200000a0

08001b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b3a:	490e      	ldr	r1, [pc, #56]	; (8001b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <LoopForever+0xe>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b50:	4c0b      	ldr	r4, [pc, #44]	; (8001b80 <LoopForever+0x16>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b5e:	f7ff f833 	bl	8000bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f001 f84b 	bl	8002bfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b66:	f7fe fd91 	bl	800068c <main>

08001b6a <LoopForever>:

LoopForever:
    b LoopForever
 8001b6a:	e7fe      	b.n	8001b6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b6c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b74:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b78:	08003574 	.word	0x08003574
  ldr r2, =_sbss
 8001b7c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b80:	200001a4 	.word	0x200001a4

08001b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC1_2_IRQHandler>

08001b86 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b089      	sub	sp, #36	; 0x24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	613b      	str	r3, [r7, #16]
  return result;
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2103      	movs	r1, #3
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	61bb      	str	r3, [r7, #24]
  return result;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	601a      	str	r2, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	3724      	adds	r7, #36	; 0x24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	431a      	orrs	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	605a      	str	r2, [r3, #4]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	613b      	str	r3, [r7, #16]
  return result;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2103      	movs	r1, #3
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	401a      	ands	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	61bb      	str	r3, [r7, #24]
  return result;
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	431a      	orrs	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001c66:	bf00      	nop
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b089      	sub	sp, #36	; 0x24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	613b      	str	r3, [r7, #16]
  return result;
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2103      	movs	r1, #3
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	61bb      	str	r3, [r7, #24]
  return result;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	60da      	str	r2, [r3, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3724      	adds	r7, #36	; 0x24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a1a      	ldr	r2, [r3, #32]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	613b      	str	r3, [r7, #16]
  return result;
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	61bb      	str	r3, [r7, #24]
  return result;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001d22:	bf00      	nop
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b089      	sub	sp, #36	; 0x24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	613b      	str	r3, [r7, #16]
  return result;
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	210f      	movs	r1, #15
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	61bb      	str	r3, [r7, #24]
  return result;
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001d84:	bf00      	nop
 8001d86:	3724      	adds	r7, #36	; 0x24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	613b      	str	r3, [r7, #16]
  return result;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001db2:	e051      	b.n	8001e58 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d043      	beq.n	8001e52 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d003      	beq.n	8001dda <LL_GPIO_Init+0x4a>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d10e      	bne.n	8001df8 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	461a      	mov	r2, r3
 8001de0:	69b9      	ldr	r1, [r7, #24]
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff16 	bl	8001c14 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	461a      	mov	r2, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fef6 	bl	8001be4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff36 	bl	8001c72 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d11a      	bne.n	8001e44 <LL_GPIO_Init+0xb4>
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	60bb      	str	r3, [r7, #8]
  return result;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b07      	cmp	r3, #7
 8001e24:	d807      	bhi.n	8001e36 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	69b9      	ldr	r1, [r7, #24]
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff4e 	bl	8001cd0 <LL_GPIO_SetAFPin_0_7>
 8001e34:	e006      	b.n	8001e44 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	69b9      	ldr	r1, [r7, #24]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff75 	bl	8001d2e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	69b9      	ldr	r1, [r7, #24]
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff fe9a 	bl	8001b86 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1a6      	bne.n	8001db4 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <LL_RCC_HSI_IsReady>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <LL_RCC_HSI_IsReady+0x20>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40021000 	.word	0x40021000

08001e94 <LL_RCC_LSE_IsReady>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <LL_RCC_LSE_IsReady+0x20>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <LL_RCC_GetSysClkSource>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <LL_RCC_GetSysClkSource+0x18>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <LL_RCC_GetAHBPrescaler+0x18>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000

08001ef0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000

08001f0c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000

08001f28 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <LL_RCC_GetUSARTClockSource+0x28>)
 8001f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f34:	2103      	movs	r1, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	061b      	lsls	r3, r3, #24
 8001f42:	4313      	orrs	r3, r2
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40021000 	.word	0x40021000

08001f54 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <LL_RCC_PLL_GetMainSource+0x18>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000

08001f70 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000

08001f8c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <LL_RCC_PLL_GetPrediv+0x18>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	f003 030f 	and.w	r3, r3, #15
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001fb0:	f000 f860 	bl	8002074 <RCC_GetSystemClockFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f87a 	bl	80020b8 <RCC_GetHCLKClockFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f888 	bl	80020e4 <RCC_GetPCLK1ClockFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f894 	bl	800210c <RCC_GetPCLK2ClockFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60da      	str	r2, [r3, #12]
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d12a      	bne.n	800205c <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ff8e 	bl	8001f28 <LL_RCC_GetUSARTClockSource>
 800200c:	4603      	mov	r3, r0
 800200e:	2b02      	cmp	r3, #2
 8002010:	d00f      	beq.n	8002032 <LL_RCC_GetUSARTClockFreq+0x3e>
 8002012:	2b03      	cmp	r3, #3
 8002014:	d005      	beq.n	8002022 <LL_RCC_GetUSARTClockFreq+0x2e>
 8002016:	2b01      	cmp	r3, #1
 8002018:	d114      	bne.n	8002044 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800201a:	f000 f82b 	bl	8002074 <RCC_GetSystemClockFreq>
 800201e:	60f8      	str	r0, [r7, #12]
        break;
 8002020:	e021      	b.n	8002066 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002022:	f7ff ff25 	bl	8001e70 <LL_RCC_HSI_IsReady>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d019      	beq.n	8002060 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <LL_RCC_GetUSARTClockFreq+0x7c>)
 800202e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002030:	e016      	b.n	8002060 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002032:	f7ff ff2f 	bl	8001e94 <LL_RCC_LSE_IsReady>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 800203c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002040:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002042:	e00f      	b.n	8002064 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002044:	f000 f816 	bl	8002074 <RCC_GetSystemClockFreq>
 8002048:	4603      	mov	r3, r0
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f834 	bl	80020b8 <RCC_GetHCLKClockFreq>
 8002050:	4603      	mov	r3, r0
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f846 	bl	80020e4 <RCC_GetPCLK1ClockFreq>
 8002058:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800205a:	e004      	b.n	8002066 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 800205c:	bf00      	nop
 800205e:	e002      	b.n	8002066 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8002060:	bf00      	nop
 8002062:	e000      	b.n	8002066 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8002064:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	007a1200 	.word	0x007a1200

08002074 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800207e:	f7ff ff1b 	bl	8001eb8 <LL_RCC_GetSysClkSource>
 8002082:	4603      	mov	r3, r0
 8002084:	2b04      	cmp	r3, #4
 8002086:	d006      	beq.n	8002096 <RCC_GetSystemClockFreq+0x22>
 8002088:	2b08      	cmp	r3, #8
 800208a:	d007      	beq.n	800209c <RCC_GetSystemClockFreq+0x28>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <RCC_GetSystemClockFreq+0x40>)
 8002092:	607b      	str	r3, [r7, #4]
      break;
 8002094:	e009      	b.n	80020aa <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <RCC_GetSystemClockFreq+0x40>)
 8002098:	607b      	str	r3, [r7, #4]
      break;
 800209a:	e006      	b.n	80020aa <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800209c:	f000 f84a 	bl	8002134 <RCC_PLL_GetFreqDomain_SYS>
 80020a0:	6078      	str	r0, [r7, #4]
      break;
 80020a2:	e002      	b.n	80020aa <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <RCC_GetSystemClockFreq+0x40>)
 80020a6:	607b      	str	r3, [r7, #4]
      break;
 80020a8:	bf00      	nop
  }

  return frequency;
 80020aa:	687b      	ldr	r3, [r7, #4]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	007a1200 	.word	0x007a1200

080020b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80020c0:	f7ff ff08 	bl	8001ed4 <LL_RCC_GetAHBPrescaler>
 80020c4:	4603      	mov	r3, r0
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <RCC_GetHCLKClockFreq+0x28>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	461a      	mov	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	40d3      	lsrs	r3, r2
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	08003500 	.word	0x08003500

080020e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80020ec:	f7ff ff00 	bl	8001ef0 <LL_RCC_GetAPB1Prescaler>
 80020f0:	4603      	mov	r3, r0
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <RCC_GetPCLK1ClockFreq+0x24>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	40d3      	lsrs	r3, r2
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	08003510 	.word	0x08003510

0800210c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002114:	f7ff fefa 	bl	8001f0c <LL_RCC_GetAPB2Prescaler>
 8002118:	4603      	mov	r3, r0
 800211a:	0adb      	lsrs	r3, r3, #11
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <RCC_GetPCLK2ClockFreq+0x24>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	461a      	mov	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	40d3      	lsrs	r3, r2
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	08003510 	.word	0x08003510

08002134 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002142:	f7ff ff07 	bl	8001f54 <LL_RCC_PLL_GetMainSource>
 8002146:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002152:	d003      	beq.n	800215c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002154:	e005      	b.n	8002162 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002158:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800215a:	e005      	b.n	8002168 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800215e:	60fb      	str	r3, [r7, #12]
      break;
 8002160:	e002      	b.n	8002168 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002164:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002166:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002168:	f7ff ff10 	bl	8001f8c <LL_RCC_PLL_GetPrediv>
 800216c:	4603      	mov	r3, r0
 800216e:	3301      	adds	r3, #1
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	fbb2 f4f3 	udiv	r4, r2, r3
 8002176:	f7ff fefb 	bl	8001f70 <LL_RCC_PLL_GetMultiplicator>
 800217a:	4603      	mov	r3, r0
 800217c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002180:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002184:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	603a      	str	r2, [r7, #0]
  return result;
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	40d3      	lsrs	r3, r2
 8002198:	3302      	adds	r3, #2
 800219a:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	003d0900 	.word	0x003d0900
 80021ac:	007a1200 	.word	0x007a1200

080021b0 <LL_TIM_SetPrescaler>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_TIM_SetAutoReload>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_TIM_SetRepetitionCounter>:
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_TIM_OC_SetCompareCH1>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_TIM_OC_SetCompareCH2>:
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_TIM_OC_SetCompareCH3>:
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_TIM_OC_SetCompareCH4>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_TIM_OC_SetCompareCH5>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_TIM_OC_SetCompareCH6>:
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	615a      	str	r2, [r3, #20]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a2f      	ldr	r2, [pc, #188]	; (80023a0 <LL_TIM_Init+0xd0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d007      	beq.n	80022f8 <LL_TIM_Init+0x28>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ee:	d003      	beq.n	80022f8 <LL_TIM_Init+0x28>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <LL_TIM_Init+0xd4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d106      	bne.n	8002306 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a25      	ldr	r2, [pc, #148]	; (80023a0 <LL_TIM_Init+0xd0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <LL_TIM_Init+0x66>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002314:	d00f      	beq.n	8002336 <LL_TIM_Init+0x66>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <LL_TIM_Init+0xd4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00b      	beq.n	8002336 <LL_TIM_Init+0x66>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <LL_TIM_Init+0xd8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <LL_TIM_Init+0x66>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a20      	ldr	r2, [pc, #128]	; (80023ac <LL_TIM_Init+0xdc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d003      	beq.n	8002336 <LL_TIM_Init+0x66>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <LL_TIM_Init+0xe0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d106      	bne.n	8002344 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4619      	mov	r1, r3
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff3b 	bl	80021cc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff27 	bl	80021b0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <LL_TIM_Init+0xd0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00b      	beq.n	8002382 <LL_TIM_Init+0xb2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <LL_TIM_Init+0xd8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <LL_TIM_Init+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <LL_TIM_Init+0xdc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d003      	beq.n	8002382 <LL_TIM_Init+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <LL_TIM_Init+0xe0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d105      	bne.n	800238e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	4619      	mov	r1, r3
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff2d 	bl	80021e8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ff8e 	bl	80022b0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40000400 	.word	0x40000400
 80023a8:	40014000 	.word	0x40014000
 80023ac:	40014400 	.word	0x40014400
 80023b0:	40014800 	.word	0x40014800

080023b4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ca:	d01f      	beq.n	800240c <LL_TIM_OC_Init+0x58>
 80023cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d0:	d804      	bhi.n	80023dc <LL_TIM_OC_Init+0x28>
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d00c      	beq.n	80023f0 <LL_TIM_OC_Init+0x3c>
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d011      	beq.n	80023fe <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80023da:	e033      	b.n	8002444 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d022      	beq.n	8002428 <LL_TIM_OC_Init+0x74>
 80023e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023e6:	d026      	beq.n	8002436 <LL_TIM_OC_Init+0x82>
 80023e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ec:	d015      	beq.n	800241a <LL_TIM_OC_Init+0x66>
      break;
 80023ee:	e029      	b.n	8002444 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f82c 	bl	8002450 <OC1Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	75fb      	strb	r3, [r7, #23]
      break;
 80023fc:	e022      	b.n	8002444 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f89f 	bl	8002544 <OC2Config>
 8002406:	4603      	mov	r3, r0
 8002408:	75fb      	strb	r3, [r7, #23]
      break;
 800240a:	e01b      	b.n	8002444 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f916 	bl	8002640 <OC3Config>
 8002414:	4603      	mov	r3, r0
 8002416:	75fb      	strb	r3, [r7, #23]
      break;
 8002418:	e014      	b.n	8002444 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f98d 	bl	800273c <OC4Config>
 8002422:	4603      	mov	r3, r0
 8002424:	75fb      	strb	r3, [r7, #23]
      break;
 8002426:	e00d      	b.n	8002444 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f9ec 	bl	8002808 <OC5Config>
 8002430:	4603      	mov	r3, r0
 8002432:	75fb      	strb	r3, [r7, #23]
      break;
 8002434:	e006      	b.n	8002444 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fa43 	bl	80028c4 <OC6Config>
 800243e:	4603      	mov	r3, r0
 8002440:	75fb      	strb	r3, [r7, #23]
      break;
 8002442:	bf00      	nop
  }

  return result;
 8002444:	7dfb      	ldrb	r3, [r7, #23]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	f023 0201 	bic.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f023 0202 	bic.w	r2, r3, #2
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f023 0201 	bic.w	r2, r3, #1
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a20      	ldr	r2, [pc, #128]	; (8002534 <OC1Config+0xe4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00b      	beq.n	80024ce <OC1Config+0x7e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <OC1Config+0xe8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <OC1Config+0x7e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <OC1Config+0xec>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d003      	beq.n	80024ce <OC1Config+0x7e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <OC1Config+0xf0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d11e      	bne.n	800250c <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f023 0208 	bic.w	r2, r3, #8
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f023 0204 	bic.w	r2, r3, #4
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4619      	mov	r1, r3
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fe70 	bl	8002204 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40014000 	.word	0x40014000
 800253c:	40014400 	.word	0x40014400
 8002540:	40014800 	.word	0x40014800

08002544 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	f023 0210 	bic.w	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800257a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	0212      	lsls	r2, r2, #8
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f023 0220 	bic.w	r2, r3, #32
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f023 0210 	bic.w	r2, r3, #16
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <OC2Config+0xec>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00b      	beq.n	80025c8 <OC2Config+0x84>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a20      	ldr	r2, [pc, #128]	; (8002634 <OC2Config+0xf0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d007      	beq.n	80025c8 <OC2Config+0x84>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <OC2Config+0xf4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d003      	beq.n	80025c8 <OC2Config+0x84>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a1e      	ldr	r2, [pc, #120]	; (800263c <OC2Config+0xf8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d11f      	bne.n	8002608 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	019b      	lsls	r3, r3, #6
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	019b      	lsls	r3, r3, #6
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4619      	mov	r1, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fe00 	bl	8002220 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40012c00 	.word	0x40012c00
 8002634:	40014000 	.word	0x40014000
 8002638:	40014400 	.word	0x40014400
 800263c:	40014800 	.word	0x40014800

08002640 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a21      	ldr	r2, [pc, #132]	; (800272c <OC3Config+0xec>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00b      	beq.n	80026c2 <OC3Config+0x82>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a20      	ldr	r2, [pc, #128]	; (8002730 <OC3Config+0xf0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d007      	beq.n	80026c2 <OC3Config+0x82>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <OC3Config+0xf4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d003      	beq.n	80026c2 <OC3Config+0x82>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <OC3Config+0xf8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d11f      	bne.n	8002702 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	029b      	lsls	r3, r3, #10
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	029b      	lsls	r3, r3, #10
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	015b      	lsls	r3, r3, #5
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4619      	mov	r1, r3
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fd91 	bl	800223c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40014000 	.word	0x40014000
 8002734:	40014400 	.word	0x40014400
 8002738:	40014800 	.word	0x40014800

0800273c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800276a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	0212      	lsls	r2, r2, #8
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	031b      	lsls	r3, r3, #12
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	031b      	lsls	r3, r3, #12
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <OC4Config+0xbc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00b      	beq.n	80027c0 <OC4Config+0x84>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a14      	ldr	r2, [pc, #80]	; (80027fc <OC4Config+0xc0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <OC4Config+0x84>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a13      	ldr	r2, [pc, #76]	; (8002800 <OC4Config+0xc4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d003      	beq.n	80027c0 <OC4Config+0x84>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <OC4Config+0xc8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d107      	bne.n	80027d0 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	019b      	lsls	r3, r3, #6
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4619      	mov	r1, r3
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff fd38 	bl	8002258 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40014000 	.word	0x40014000
 8002800:	40014400 	.word	0x40014400
 8002804:	40014800 	.word	0x40014800

08002808 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	4313      	orrs	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <OC5Config+0xac>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00b      	beq.n	800287c <OC5Config+0x74>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <OC5Config+0xb0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d007      	beq.n	800287c <OC5Config+0x74>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <OC5Config+0xb4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d003      	beq.n	800287c <OC5Config+0x74>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <OC5Config+0xb8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d109      	bne.n	8002890 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff fce9 	bl	8002274 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40014000 	.word	0x40014000
 80028bc:	40014400 	.word	0x40014400
 80028c0:	40014800 	.word	0x40014800

080028c4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	0212      	lsls	r2, r2, #8
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	051b      	lsls	r3, r3, #20
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	051b      	lsls	r3, r3, #20
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <OC6Config+0xac>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00b      	beq.n	800293a <OC6Config+0x76>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a13      	ldr	r2, [pc, #76]	; (8002974 <OC6Config+0xb0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d007      	beq.n	800293a <OC6Config+0x76>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a12      	ldr	r2, [pc, #72]	; (8002978 <OC6Config+0xb4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d003      	beq.n	800293a <OC6Config+0x76>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a11      	ldr	r2, [pc, #68]	; (800297c <OC6Config+0xb8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d109      	bne.n	800294e <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	029b      	lsls	r3, r3, #10
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4619      	mov	r1, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fc9a 	bl	8002294 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40014000 	.word	0x40014000
 8002978:	40014400 	.word	0x40014400
 800297c:	40014800 	.word	0x40014800

08002980 <LL_USART_IsEnabled>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <LL_USART_IsEnabled+0x18>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_USART_IsEnabled+0x1a>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_USART_SetStopBitsLength>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	605a      	str	r2, [r3, #4]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_USART_SetHWFlowCtrl>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	609a      	str	r2, [r3, #8]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_USART_SetBaudRate>:
{
 80029f2:	b480      	push	{r7}
 80029f4:	b087      	sub	sp, #28
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a06:	d11a      	bne.n	8002a3e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	005a      	lsls	r2, r3, #1
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	441a      	add	r2, r3
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	60da      	str	r2, [r3, #12]
}
 8002a3c:	e00a      	b.n	8002a54 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	085a      	lsrs	r2, r3, #1
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	441a      	add	r2, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	60da      	str	r2, [r3, #12]
}
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ff84 	bl	8002980 <LL_USART_IsEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d14e      	bne.n	8002b1c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <LL_USART_Init+0xc8>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	6851      	ldr	r1, [r2, #4]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	68d2      	ldr	r2, [r2, #12]
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	6912      	ldr	r2, [r2, #16]
 8002a94:	4311      	orrs	r1, r2
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	6992      	ldr	r2, [r2, #24]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff7c 	bl	80029a6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff89 	bl	80029cc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <LL_USART_Init+0xcc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d104      	bne.n	8002acc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7ff fa96 	bl	8001ff4 <LL_RCC_GetUSARTClockFreq>
 8002ac8:	61b8      	str	r0, [r7, #24]
 8002aca:	e016      	b.n	8002afa <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <LL_USART_Init+0xd0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d107      	bne.n	8002ae4 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002ad4:	f107 0308 	add.w	r3, r7, #8
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fa65 	bl	8001fa8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e00a      	b.n	8002afa <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <LL_USART_Init+0xd4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d106      	bne.n	8002afa <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002aec:	f107 0308 	add.w	r3, r7, #8
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fa59 	bl	8001fa8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00d      	beq.n	8002b1c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69b9      	ldr	r1, [r7, #24]
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ff6b 	bl	80029f2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002b1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	efff69f3 	.word	0xefff69f3
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40004400 	.word	0x40004400
 8002b34:	40004800 	.word	0x40004800

08002b38 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <LL_InitTick+0x30>)
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <LL_InitTick+0x30>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b56:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <LL_InitTick+0x30>)
 8002b58:	2205      	movs	r2, #5
 8002b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e010 	.word	0xe000e010

08002b6c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002b74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffdd 	bl	8002b38 <LL_InitTick>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <LL_mDelay+0x44>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002b96:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d00c      	beq.n	8002bba <LL_mDelay+0x32>
  {
    Delay++;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002ba6:	e008      	b.n	8002bba <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <LL_mDelay+0x44>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <LL_mDelay+0x32>
    {
      Delay--;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f3      	bne.n	8002ba8 <LL_mDelay+0x20>
    }
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <LL_SetSystemCoreClock+0x1c>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000000 	.word	0x20000000

08002bf0 <__errno>:
 8002bf0:	4b01      	ldr	r3, [pc, #4]	; (8002bf8 <__errno+0x8>)
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000008 	.word	0x20000008

08002bfc <__libc_init_array>:
 8002bfc:	b570      	push	{r4, r5, r6, lr}
 8002bfe:	4e0d      	ldr	r6, [pc, #52]	; (8002c34 <__libc_init_array+0x38>)
 8002c00:	4c0d      	ldr	r4, [pc, #52]	; (8002c38 <__libc_init_array+0x3c>)
 8002c02:	1ba4      	subs	r4, r4, r6
 8002c04:	10a4      	asrs	r4, r4, #2
 8002c06:	2500      	movs	r5, #0
 8002c08:	42a5      	cmp	r5, r4
 8002c0a:	d109      	bne.n	8002c20 <__libc_init_array+0x24>
 8002c0c:	4e0b      	ldr	r6, [pc, #44]	; (8002c3c <__libc_init_array+0x40>)
 8002c0e:	4c0c      	ldr	r4, [pc, #48]	; (8002c40 <__libc_init_array+0x44>)
 8002c10:	f000 fc54 	bl	80034bc <_init>
 8002c14:	1ba4      	subs	r4, r4, r6
 8002c16:	10a4      	asrs	r4, r4, #2
 8002c18:	2500      	movs	r5, #0
 8002c1a:	42a5      	cmp	r5, r4
 8002c1c:	d105      	bne.n	8002c2a <__libc_init_array+0x2e>
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
 8002c20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c24:	4798      	blx	r3
 8002c26:	3501      	adds	r5, #1
 8002c28:	e7ee      	b.n	8002c08 <__libc_init_array+0xc>
 8002c2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c2e:	4798      	blx	r3
 8002c30:	3501      	adds	r5, #1
 8002c32:	e7f2      	b.n	8002c1a <__libc_init_array+0x1e>
 8002c34:	0800356c 	.word	0x0800356c
 8002c38:	0800356c 	.word	0x0800356c
 8002c3c:	0800356c 	.word	0x0800356c
 8002c40:	08003570 	.word	0x08003570

08002c44 <malloc>:
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <malloc+0xc>)
 8002c46:	4601      	mov	r1, r0
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	f000 b859 	b.w	8002d00 <_malloc_r>
 8002c4e:	bf00      	nop
 8002c50:	20000008 	.word	0x20000008

08002c54 <memset>:
 8002c54:	4402      	add	r2, r0
 8002c56:	4603      	mov	r3, r0
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d100      	bne.n	8002c5e <memset+0xa>
 8002c5c:	4770      	bx	lr
 8002c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c62:	e7f9      	b.n	8002c58 <memset+0x4>

08002c64 <_free_r>:
 8002c64:	b538      	push	{r3, r4, r5, lr}
 8002c66:	4605      	mov	r5, r0
 8002c68:	2900      	cmp	r1, #0
 8002c6a:	d045      	beq.n	8002cf8 <_free_r+0x94>
 8002c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c70:	1f0c      	subs	r4, r1, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bfb8      	it	lt
 8002c76:	18e4      	addlt	r4, r4, r3
 8002c78:	f000 f8f2 	bl	8002e60 <__malloc_lock>
 8002c7c:	4a1f      	ldr	r2, [pc, #124]	; (8002cfc <_free_r+0x98>)
 8002c7e:	6813      	ldr	r3, [r2, #0]
 8002c80:	4610      	mov	r0, r2
 8002c82:	b933      	cbnz	r3, 8002c92 <_free_r+0x2e>
 8002c84:	6063      	str	r3, [r4, #4]
 8002c86:	6014      	str	r4, [r2, #0]
 8002c88:	4628      	mov	r0, r5
 8002c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c8e:	f000 b8e8 	b.w	8002e62 <__malloc_unlock>
 8002c92:	42a3      	cmp	r3, r4
 8002c94:	d90c      	bls.n	8002cb0 <_free_r+0x4c>
 8002c96:	6821      	ldr	r1, [r4, #0]
 8002c98:	1862      	adds	r2, r4, r1
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	bf04      	itt	eq
 8002c9e:	681a      	ldreq	r2, [r3, #0]
 8002ca0:	685b      	ldreq	r3, [r3, #4]
 8002ca2:	6063      	str	r3, [r4, #4]
 8002ca4:	bf04      	itt	eq
 8002ca6:	1852      	addeq	r2, r2, r1
 8002ca8:	6022      	streq	r2, [r4, #0]
 8002caa:	6004      	str	r4, [r0, #0]
 8002cac:	e7ec      	b.n	8002c88 <_free_r+0x24>
 8002cae:	4613      	mov	r3, r2
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	b10a      	cbz	r2, 8002cb8 <_free_r+0x54>
 8002cb4:	42a2      	cmp	r2, r4
 8002cb6:	d9fa      	bls.n	8002cae <_free_r+0x4a>
 8002cb8:	6819      	ldr	r1, [r3, #0]
 8002cba:	1858      	adds	r0, r3, r1
 8002cbc:	42a0      	cmp	r0, r4
 8002cbe:	d10b      	bne.n	8002cd8 <_free_r+0x74>
 8002cc0:	6820      	ldr	r0, [r4, #0]
 8002cc2:	4401      	add	r1, r0
 8002cc4:	1858      	adds	r0, r3, r1
 8002cc6:	4282      	cmp	r2, r0
 8002cc8:	6019      	str	r1, [r3, #0]
 8002cca:	d1dd      	bne.n	8002c88 <_free_r+0x24>
 8002ccc:	6810      	ldr	r0, [r2, #0]
 8002cce:	6852      	ldr	r2, [r2, #4]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	4401      	add	r1, r0
 8002cd4:	6019      	str	r1, [r3, #0]
 8002cd6:	e7d7      	b.n	8002c88 <_free_r+0x24>
 8002cd8:	d902      	bls.n	8002ce0 <_free_r+0x7c>
 8002cda:	230c      	movs	r3, #12
 8002cdc:	602b      	str	r3, [r5, #0]
 8002cde:	e7d3      	b.n	8002c88 <_free_r+0x24>
 8002ce0:	6820      	ldr	r0, [r4, #0]
 8002ce2:	1821      	adds	r1, r4, r0
 8002ce4:	428a      	cmp	r2, r1
 8002ce6:	bf04      	itt	eq
 8002ce8:	6811      	ldreq	r1, [r2, #0]
 8002cea:	6852      	ldreq	r2, [r2, #4]
 8002cec:	6062      	str	r2, [r4, #4]
 8002cee:	bf04      	itt	eq
 8002cf0:	1809      	addeq	r1, r1, r0
 8002cf2:	6021      	streq	r1, [r4, #0]
 8002cf4:	605c      	str	r4, [r3, #4]
 8002cf6:	e7c7      	b.n	8002c88 <_free_r+0x24>
 8002cf8:	bd38      	pop	{r3, r4, r5, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000098 	.word	0x20000098

08002d00 <_malloc_r>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	1ccd      	adds	r5, r1, #3
 8002d04:	f025 0503 	bic.w	r5, r5, #3
 8002d08:	3508      	adds	r5, #8
 8002d0a:	2d0c      	cmp	r5, #12
 8002d0c:	bf38      	it	cc
 8002d0e:	250c      	movcc	r5, #12
 8002d10:	2d00      	cmp	r5, #0
 8002d12:	4606      	mov	r6, r0
 8002d14:	db01      	blt.n	8002d1a <_malloc_r+0x1a>
 8002d16:	42a9      	cmp	r1, r5
 8002d18:	d903      	bls.n	8002d22 <_malloc_r+0x22>
 8002d1a:	230c      	movs	r3, #12
 8002d1c:	6033      	str	r3, [r6, #0]
 8002d1e:	2000      	movs	r0, #0
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
 8002d22:	f000 f89d 	bl	8002e60 <__malloc_lock>
 8002d26:	4a21      	ldr	r2, [pc, #132]	; (8002dac <_malloc_r+0xac>)
 8002d28:	6814      	ldr	r4, [r2, #0]
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	b991      	cbnz	r1, 8002d54 <_malloc_r+0x54>
 8002d2e:	4c20      	ldr	r4, [pc, #128]	; (8002db0 <_malloc_r+0xb0>)
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	b91b      	cbnz	r3, 8002d3c <_malloc_r+0x3c>
 8002d34:	4630      	mov	r0, r6
 8002d36:	f000 f83d 	bl	8002db4 <_sbrk_r>
 8002d3a:	6020      	str	r0, [r4, #0]
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	4630      	mov	r0, r6
 8002d40:	f000 f838 	bl	8002db4 <_sbrk_r>
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	d124      	bne.n	8002d92 <_malloc_r+0x92>
 8002d48:	230c      	movs	r3, #12
 8002d4a:	6033      	str	r3, [r6, #0]
 8002d4c:	4630      	mov	r0, r6
 8002d4e:	f000 f888 	bl	8002e62 <__malloc_unlock>
 8002d52:	e7e4      	b.n	8002d1e <_malloc_r+0x1e>
 8002d54:	680b      	ldr	r3, [r1, #0]
 8002d56:	1b5b      	subs	r3, r3, r5
 8002d58:	d418      	bmi.n	8002d8c <_malloc_r+0x8c>
 8002d5a:	2b0b      	cmp	r3, #11
 8002d5c:	d90f      	bls.n	8002d7e <_malloc_r+0x7e>
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	50cd      	str	r5, [r1, r3]
 8002d62:	18cc      	adds	r4, r1, r3
 8002d64:	4630      	mov	r0, r6
 8002d66:	f000 f87c 	bl	8002e62 <__malloc_unlock>
 8002d6a:	f104 000b 	add.w	r0, r4, #11
 8002d6e:	1d23      	adds	r3, r4, #4
 8002d70:	f020 0007 	bic.w	r0, r0, #7
 8002d74:	1ac3      	subs	r3, r0, r3
 8002d76:	d0d3      	beq.n	8002d20 <_malloc_r+0x20>
 8002d78:	425a      	negs	r2, r3
 8002d7a:	50e2      	str	r2, [r4, r3]
 8002d7c:	e7d0      	b.n	8002d20 <_malloc_r+0x20>
 8002d7e:	428c      	cmp	r4, r1
 8002d80:	684b      	ldr	r3, [r1, #4]
 8002d82:	bf16      	itet	ne
 8002d84:	6063      	strne	r3, [r4, #4]
 8002d86:	6013      	streq	r3, [r2, #0]
 8002d88:	460c      	movne	r4, r1
 8002d8a:	e7eb      	b.n	8002d64 <_malloc_r+0x64>
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	6849      	ldr	r1, [r1, #4]
 8002d90:	e7cc      	b.n	8002d2c <_malloc_r+0x2c>
 8002d92:	1cc4      	adds	r4, r0, #3
 8002d94:	f024 0403 	bic.w	r4, r4, #3
 8002d98:	42a0      	cmp	r0, r4
 8002d9a:	d005      	beq.n	8002da8 <_malloc_r+0xa8>
 8002d9c:	1a21      	subs	r1, r4, r0
 8002d9e:	4630      	mov	r0, r6
 8002da0:	f000 f808 	bl	8002db4 <_sbrk_r>
 8002da4:	3001      	adds	r0, #1
 8002da6:	d0cf      	beq.n	8002d48 <_malloc_r+0x48>
 8002da8:	6025      	str	r5, [r4, #0]
 8002daa:	e7db      	b.n	8002d64 <_malloc_r+0x64>
 8002dac:	20000098 	.word	0x20000098
 8002db0:	2000009c 	.word	0x2000009c

08002db4 <_sbrk_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	4c06      	ldr	r4, [pc, #24]	; (8002dd0 <_sbrk_r+0x1c>)
 8002db8:	2300      	movs	r3, #0
 8002dba:	4605      	mov	r5, r0
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	6023      	str	r3, [r4, #0]
 8002dc0:	f7fd fecc 	bl	8000b5c <_sbrk>
 8002dc4:	1c43      	adds	r3, r0, #1
 8002dc6:	d102      	bne.n	8002dce <_sbrk_r+0x1a>
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	b103      	cbz	r3, 8002dce <_sbrk_r+0x1a>
 8002dcc:	602b      	str	r3, [r5, #0]
 8002dce:	bd38      	pop	{r3, r4, r5, pc}
 8002dd0:	200001a0 	.word	0x200001a0

08002dd4 <sniprintf>:
 8002dd4:	b40c      	push	{r2, r3}
 8002dd6:	b530      	push	{r4, r5, lr}
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <sniprintf+0x64>)
 8002dda:	1e0c      	subs	r4, r1, #0
 8002ddc:	b09d      	sub	sp, #116	; 0x74
 8002dde:	681d      	ldr	r5, [r3, #0]
 8002de0:	da08      	bge.n	8002df4 <sniprintf+0x20>
 8002de2:	238b      	movs	r3, #139	; 0x8b
 8002de4:	602b      	str	r3, [r5, #0]
 8002de6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dea:	b01d      	add	sp, #116	; 0x74
 8002dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002df0:	b002      	add	sp, #8
 8002df2:	4770      	bx	lr
 8002df4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002df8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002dfc:	bf14      	ite	ne
 8002dfe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002e02:	4623      	moveq	r3, r4
 8002e04:	9304      	str	r3, [sp, #16]
 8002e06:	9307      	str	r3, [sp, #28]
 8002e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e0c:	9002      	str	r0, [sp, #8]
 8002e0e:	9006      	str	r0, [sp, #24]
 8002e10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002e14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002e16:	ab21      	add	r3, sp, #132	; 0x84
 8002e18:	a902      	add	r1, sp, #8
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	f000 f87b 	bl	8002f18 <_svfiprintf_r>
 8002e22:	1c43      	adds	r3, r0, #1
 8002e24:	bfbc      	itt	lt
 8002e26:	238b      	movlt	r3, #139	; 0x8b
 8002e28:	602b      	strlt	r3, [r5, #0]
 8002e2a:	2c00      	cmp	r4, #0
 8002e2c:	d0dd      	beq.n	8002dea <sniprintf+0x16>
 8002e2e:	9b02      	ldr	r3, [sp, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e7d9      	b.n	8002dea <sniprintf+0x16>
 8002e36:	bf00      	nop
 8002e38:	20000008 	.word	0x20000008

08002e3c <strncmp>:
 8002e3c:	b510      	push	{r4, lr}
 8002e3e:	b16a      	cbz	r2, 8002e5c <strncmp+0x20>
 8002e40:	3901      	subs	r1, #1
 8002e42:	1884      	adds	r4, r0, r2
 8002e44:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002e48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d103      	bne.n	8002e58 <strncmp+0x1c>
 8002e50:	42a0      	cmp	r0, r4
 8002e52:	d001      	beq.n	8002e58 <strncmp+0x1c>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f5      	bne.n	8002e44 <strncmp+0x8>
 8002e58:	1a98      	subs	r0, r3, r2
 8002e5a:	bd10      	pop	{r4, pc}
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	e7fc      	b.n	8002e5a <strncmp+0x1e>

08002e60 <__malloc_lock>:
 8002e60:	4770      	bx	lr

08002e62 <__malloc_unlock>:
 8002e62:	4770      	bx	lr

08002e64 <__ssputs_r>:
 8002e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e68:	688e      	ldr	r6, [r1, #8]
 8002e6a:	429e      	cmp	r6, r3
 8002e6c:	4682      	mov	sl, r0
 8002e6e:	460c      	mov	r4, r1
 8002e70:	4690      	mov	r8, r2
 8002e72:	4699      	mov	r9, r3
 8002e74:	d837      	bhi.n	8002ee6 <__ssputs_r+0x82>
 8002e76:	898a      	ldrh	r2, [r1, #12]
 8002e78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e7c:	d031      	beq.n	8002ee2 <__ssputs_r+0x7e>
 8002e7e:	6825      	ldr	r5, [r4, #0]
 8002e80:	6909      	ldr	r1, [r1, #16]
 8002e82:	1a6f      	subs	r7, r5, r1
 8002e84:	6965      	ldr	r5, [r4, #20]
 8002e86:	2302      	movs	r3, #2
 8002e88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e90:	f109 0301 	add.w	r3, r9, #1
 8002e94:	443b      	add	r3, r7
 8002e96:	429d      	cmp	r5, r3
 8002e98:	bf38      	it	cc
 8002e9a:	461d      	movcc	r5, r3
 8002e9c:	0553      	lsls	r3, r2, #21
 8002e9e:	d530      	bpl.n	8002f02 <__ssputs_r+0x9e>
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	f7ff ff2d 	bl	8002d00 <_malloc_r>
 8002ea6:	4606      	mov	r6, r0
 8002ea8:	b950      	cbnz	r0, 8002ec0 <__ssputs_r+0x5c>
 8002eaa:	230c      	movs	r3, #12
 8002eac:	f8ca 3000 	str.w	r3, [sl]
 8002eb0:	89a3      	ldrh	r3, [r4, #12]
 8002eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb6:	81a3      	strh	r3, [r4, #12]
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec0:	463a      	mov	r2, r7
 8002ec2:	6921      	ldr	r1, [r4, #16]
 8002ec4:	f000 faa8 	bl	8003418 <memcpy>
 8002ec8:	89a3      	ldrh	r3, [r4, #12]
 8002eca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed2:	81a3      	strh	r3, [r4, #12]
 8002ed4:	6126      	str	r6, [r4, #16]
 8002ed6:	6165      	str	r5, [r4, #20]
 8002ed8:	443e      	add	r6, r7
 8002eda:	1bed      	subs	r5, r5, r7
 8002edc:	6026      	str	r6, [r4, #0]
 8002ede:	60a5      	str	r5, [r4, #8]
 8002ee0:	464e      	mov	r6, r9
 8002ee2:	454e      	cmp	r6, r9
 8002ee4:	d900      	bls.n	8002ee8 <__ssputs_r+0x84>
 8002ee6:	464e      	mov	r6, r9
 8002ee8:	4632      	mov	r2, r6
 8002eea:	4641      	mov	r1, r8
 8002eec:	6820      	ldr	r0, [r4, #0]
 8002eee:	f000 fa9e 	bl	800342e <memmove>
 8002ef2:	68a3      	ldr	r3, [r4, #8]
 8002ef4:	1b9b      	subs	r3, r3, r6
 8002ef6:	60a3      	str	r3, [r4, #8]
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	441e      	add	r6, r3
 8002efc:	6026      	str	r6, [r4, #0]
 8002efe:	2000      	movs	r0, #0
 8002f00:	e7dc      	b.n	8002ebc <__ssputs_r+0x58>
 8002f02:	462a      	mov	r2, r5
 8002f04:	f000 faac 	bl	8003460 <_realloc_r>
 8002f08:	4606      	mov	r6, r0
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	d1e2      	bne.n	8002ed4 <__ssputs_r+0x70>
 8002f0e:	6921      	ldr	r1, [r4, #16]
 8002f10:	4650      	mov	r0, sl
 8002f12:	f7ff fea7 	bl	8002c64 <_free_r>
 8002f16:	e7c8      	b.n	8002eaa <__ssputs_r+0x46>

08002f18 <_svfiprintf_r>:
 8002f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1c:	461d      	mov	r5, r3
 8002f1e:	898b      	ldrh	r3, [r1, #12]
 8002f20:	061f      	lsls	r7, r3, #24
 8002f22:	b09d      	sub	sp, #116	; 0x74
 8002f24:	4680      	mov	r8, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	4616      	mov	r6, r2
 8002f2a:	d50f      	bpl.n	8002f4c <_svfiprintf_r+0x34>
 8002f2c:	690b      	ldr	r3, [r1, #16]
 8002f2e:	b96b      	cbnz	r3, 8002f4c <_svfiprintf_r+0x34>
 8002f30:	2140      	movs	r1, #64	; 0x40
 8002f32:	f7ff fee5 	bl	8002d00 <_malloc_r>
 8002f36:	6020      	str	r0, [r4, #0]
 8002f38:	6120      	str	r0, [r4, #16]
 8002f3a:	b928      	cbnz	r0, 8002f48 <_svfiprintf_r+0x30>
 8002f3c:	230c      	movs	r3, #12
 8002f3e:	f8c8 3000 	str.w	r3, [r8]
 8002f42:	f04f 30ff 	mov.w	r0, #4294967295
 8002f46:	e0c8      	b.n	80030da <_svfiprintf_r+0x1c2>
 8002f48:	2340      	movs	r3, #64	; 0x40
 8002f4a:	6163      	str	r3, [r4, #20]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f50:	2320      	movs	r3, #32
 8002f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f56:	2330      	movs	r3, #48	; 0x30
 8002f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f5c:	9503      	str	r5, [sp, #12]
 8002f5e:	f04f 0b01 	mov.w	fp, #1
 8002f62:	4637      	mov	r7, r6
 8002f64:	463d      	mov	r5, r7
 8002f66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f6a:	b10b      	cbz	r3, 8002f70 <_svfiprintf_r+0x58>
 8002f6c:	2b25      	cmp	r3, #37	; 0x25
 8002f6e:	d13e      	bne.n	8002fee <_svfiprintf_r+0xd6>
 8002f70:	ebb7 0a06 	subs.w	sl, r7, r6
 8002f74:	d00b      	beq.n	8002f8e <_svfiprintf_r+0x76>
 8002f76:	4653      	mov	r3, sl
 8002f78:	4632      	mov	r2, r6
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	4640      	mov	r0, r8
 8002f7e:	f7ff ff71 	bl	8002e64 <__ssputs_r>
 8002f82:	3001      	adds	r0, #1
 8002f84:	f000 80a4 	beq.w	80030d0 <_svfiprintf_r+0x1b8>
 8002f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f8a:	4453      	add	r3, sl
 8002f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f8e:	783b      	ldrb	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 809d 	beq.w	80030d0 <_svfiprintf_r+0x1b8>
 8002f96:	2300      	movs	r3, #0
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fa0:	9304      	str	r3, [sp, #16]
 8002fa2:	9307      	str	r3, [sp, #28]
 8002fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8002faa:	462f      	mov	r7, r5
 8002fac:	2205      	movs	r2, #5
 8002fae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002fb2:	4850      	ldr	r0, [pc, #320]	; (80030f4 <_svfiprintf_r+0x1dc>)
 8002fb4:	f7fd f924 	bl	8000200 <memchr>
 8002fb8:	9b04      	ldr	r3, [sp, #16]
 8002fba:	b9d0      	cbnz	r0, 8002ff2 <_svfiprintf_r+0xda>
 8002fbc:	06d9      	lsls	r1, r3, #27
 8002fbe:	bf44      	itt	mi
 8002fc0:	2220      	movmi	r2, #32
 8002fc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002fc6:	071a      	lsls	r2, r3, #28
 8002fc8:	bf44      	itt	mi
 8002fca:	222b      	movmi	r2, #43	; 0x2b
 8002fcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002fd0:	782a      	ldrb	r2, [r5, #0]
 8002fd2:	2a2a      	cmp	r2, #42	; 0x2a
 8002fd4:	d015      	beq.n	8003002 <_svfiprintf_r+0xea>
 8002fd6:	9a07      	ldr	r2, [sp, #28]
 8002fd8:	462f      	mov	r7, r5
 8002fda:	2000      	movs	r0, #0
 8002fdc:	250a      	movs	r5, #10
 8002fde:	4639      	mov	r1, r7
 8002fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fe4:	3b30      	subs	r3, #48	; 0x30
 8002fe6:	2b09      	cmp	r3, #9
 8002fe8:	d94d      	bls.n	8003086 <_svfiprintf_r+0x16e>
 8002fea:	b1b8      	cbz	r0, 800301c <_svfiprintf_r+0x104>
 8002fec:	e00f      	b.n	800300e <_svfiprintf_r+0xf6>
 8002fee:	462f      	mov	r7, r5
 8002ff0:	e7b8      	b.n	8002f64 <_svfiprintf_r+0x4c>
 8002ff2:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <_svfiprintf_r+0x1dc>)
 8002ff4:	1a80      	subs	r0, r0, r2
 8002ff6:	fa0b f000 	lsl.w	r0, fp, r0
 8002ffa:	4318      	orrs	r0, r3
 8002ffc:	9004      	str	r0, [sp, #16]
 8002ffe:	463d      	mov	r5, r7
 8003000:	e7d3      	b.n	8002faa <_svfiprintf_r+0x92>
 8003002:	9a03      	ldr	r2, [sp, #12]
 8003004:	1d11      	adds	r1, r2, #4
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	9103      	str	r1, [sp, #12]
 800300a:	2a00      	cmp	r2, #0
 800300c:	db01      	blt.n	8003012 <_svfiprintf_r+0xfa>
 800300e:	9207      	str	r2, [sp, #28]
 8003010:	e004      	b.n	800301c <_svfiprintf_r+0x104>
 8003012:	4252      	negs	r2, r2
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	9207      	str	r2, [sp, #28]
 800301a:	9304      	str	r3, [sp, #16]
 800301c:	783b      	ldrb	r3, [r7, #0]
 800301e:	2b2e      	cmp	r3, #46	; 0x2e
 8003020:	d10c      	bne.n	800303c <_svfiprintf_r+0x124>
 8003022:	787b      	ldrb	r3, [r7, #1]
 8003024:	2b2a      	cmp	r3, #42	; 0x2a
 8003026:	d133      	bne.n	8003090 <_svfiprintf_r+0x178>
 8003028:	9b03      	ldr	r3, [sp, #12]
 800302a:	1d1a      	adds	r2, r3, #4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	9203      	str	r2, [sp, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	bfb8      	it	lt
 8003034:	f04f 33ff 	movlt.w	r3, #4294967295
 8003038:	3702      	adds	r7, #2
 800303a:	9305      	str	r3, [sp, #20]
 800303c:	4d2e      	ldr	r5, [pc, #184]	; (80030f8 <_svfiprintf_r+0x1e0>)
 800303e:	7839      	ldrb	r1, [r7, #0]
 8003040:	2203      	movs	r2, #3
 8003042:	4628      	mov	r0, r5
 8003044:	f7fd f8dc 	bl	8000200 <memchr>
 8003048:	b138      	cbz	r0, 800305a <_svfiprintf_r+0x142>
 800304a:	2340      	movs	r3, #64	; 0x40
 800304c:	1b40      	subs	r0, r0, r5
 800304e:	fa03 f000 	lsl.w	r0, r3, r0
 8003052:	9b04      	ldr	r3, [sp, #16]
 8003054:	4303      	orrs	r3, r0
 8003056:	3701      	adds	r7, #1
 8003058:	9304      	str	r3, [sp, #16]
 800305a:	7839      	ldrb	r1, [r7, #0]
 800305c:	4827      	ldr	r0, [pc, #156]	; (80030fc <_svfiprintf_r+0x1e4>)
 800305e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003062:	2206      	movs	r2, #6
 8003064:	1c7e      	adds	r6, r7, #1
 8003066:	f7fd f8cb 	bl	8000200 <memchr>
 800306a:	2800      	cmp	r0, #0
 800306c:	d038      	beq.n	80030e0 <_svfiprintf_r+0x1c8>
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <_svfiprintf_r+0x1e8>)
 8003070:	bb13      	cbnz	r3, 80030b8 <_svfiprintf_r+0x1a0>
 8003072:	9b03      	ldr	r3, [sp, #12]
 8003074:	3307      	adds	r3, #7
 8003076:	f023 0307 	bic.w	r3, r3, #7
 800307a:	3308      	adds	r3, #8
 800307c:	9303      	str	r3, [sp, #12]
 800307e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003080:	444b      	add	r3, r9
 8003082:	9309      	str	r3, [sp, #36]	; 0x24
 8003084:	e76d      	b.n	8002f62 <_svfiprintf_r+0x4a>
 8003086:	fb05 3202 	mla	r2, r5, r2, r3
 800308a:	2001      	movs	r0, #1
 800308c:	460f      	mov	r7, r1
 800308e:	e7a6      	b.n	8002fde <_svfiprintf_r+0xc6>
 8003090:	2300      	movs	r3, #0
 8003092:	3701      	adds	r7, #1
 8003094:	9305      	str	r3, [sp, #20]
 8003096:	4619      	mov	r1, r3
 8003098:	250a      	movs	r5, #10
 800309a:	4638      	mov	r0, r7
 800309c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030a0:	3a30      	subs	r2, #48	; 0x30
 80030a2:	2a09      	cmp	r2, #9
 80030a4:	d903      	bls.n	80030ae <_svfiprintf_r+0x196>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0c8      	beq.n	800303c <_svfiprintf_r+0x124>
 80030aa:	9105      	str	r1, [sp, #20]
 80030ac:	e7c6      	b.n	800303c <_svfiprintf_r+0x124>
 80030ae:	fb05 2101 	mla	r1, r5, r1, r2
 80030b2:	2301      	movs	r3, #1
 80030b4:	4607      	mov	r7, r0
 80030b6:	e7f0      	b.n	800309a <_svfiprintf_r+0x182>
 80030b8:	ab03      	add	r3, sp, #12
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	4622      	mov	r2, r4
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <_svfiprintf_r+0x1ec>)
 80030c0:	a904      	add	r1, sp, #16
 80030c2:	4640      	mov	r0, r8
 80030c4:	f3af 8000 	nop.w
 80030c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80030cc:	4681      	mov	r9, r0
 80030ce:	d1d6      	bne.n	800307e <_svfiprintf_r+0x166>
 80030d0:	89a3      	ldrh	r3, [r4, #12]
 80030d2:	065b      	lsls	r3, r3, #25
 80030d4:	f53f af35 	bmi.w	8002f42 <_svfiprintf_r+0x2a>
 80030d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030da:	b01d      	add	sp, #116	; 0x74
 80030dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e0:	ab03      	add	r3, sp, #12
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	4622      	mov	r2, r4
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <_svfiprintf_r+0x1ec>)
 80030e8:	a904      	add	r1, sp, #16
 80030ea:	4640      	mov	r0, r8
 80030ec:	f000 f882 	bl	80031f4 <_printf_i>
 80030f0:	e7ea      	b.n	80030c8 <_svfiprintf_r+0x1b0>
 80030f2:	bf00      	nop
 80030f4:	08003537 	.word	0x08003537
 80030f8:	0800353d 	.word	0x0800353d
 80030fc:	08003541 	.word	0x08003541
 8003100:	00000000 	.word	0x00000000
 8003104:	08002e65 	.word	0x08002e65

08003108 <_printf_common>:
 8003108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800310c:	4691      	mov	r9, r2
 800310e:	461f      	mov	r7, r3
 8003110:	688a      	ldr	r2, [r1, #8]
 8003112:	690b      	ldr	r3, [r1, #16]
 8003114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003118:	4293      	cmp	r3, r2
 800311a:	bfb8      	it	lt
 800311c:	4613      	movlt	r3, r2
 800311e:	f8c9 3000 	str.w	r3, [r9]
 8003122:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003126:	4606      	mov	r6, r0
 8003128:	460c      	mov	r4, r1
 800312a:	b112      	cbz	r2, 8003132 <_printf_common+0x2a>
 800312c:	3301      	adds	r3, #1
 800312e:	f8c9 3000 	str.w	r3, [r9]
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	0699      	lsls	r1, r3, #26
 8003136:	bf42      	ittt	mi
 8003138:	f8d9 3000 	ldrmi.w	r3, [r9]
 800313c:	3302      	addmi	r3, #2
 800313e:	f8c9 3000 	strmi.w	r3, [r9]
 8003142:	6825      	ldr	r5, [r4, #0]
 8003144:	f015 0506 	ands.w	r5, r5, #6
 8003148:	d107      	bne.n	800315a <_printf_common+0x52>
 800314a:	f104 0a19 	add.w	sl, r4, #25
 800314e:	68e3      	ldr	r3, [r4, #12]
 8003150:	f8d9 2000 	ldr.w	r2, [r9]
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	42ab      	cmp	r3, r5
 8003158:	dc28      	bgt.n	80031ac <_printf_common+0xa4>
 800315a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800315e:	6822      	ldr	r2, [r4, #0]
 8003160:	3300      	adds	r3, #0
 8003162:	bf18      	it	ne
 8003164:	2301      	movne	r3, #1
 8003166:	0692      	lsls	r2, r2, #26
 8003168:	d42d      	bmi.n	80031c6 <_printf_common+0xbe>
 800316a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800316e:	4639      	mov	r1, r7
 8003170:	4630      	mov	r0, r6
 8003172:	47c0      	blx	r8
 8003174:	3001      	adds	r0, #1
 8003176:	d020      	beq.n	80031ba <_printf_common+0xb2>
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	68e5      	ldr	r5, [r4, #12]
 800317c:	f8d9 2000 	ldr.w	r2, [r9]
 8003180:	f003 0306 	and.w	r3, r3, #6
 8003184:	2b04      	cmp	r3, #4
 8003186:	bf08      	it	eq
 8003188:	1aad      	subeq	r5, r5, r2
 800318a:	68a3      	ldr	r3, [r4, #8]
 800318c:	6922      	ldr	r2, [r4, #16]
 800318e:	bf0c      	ite	eq
 8003190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003194:	2500      	movne	r5, #0
 8003196:	4293      	cmp	r3, r2
 8003198:	bfc4      	itt	gt
 800319a:	1a9b      	subgt	r3, r3, r2
 800319c:	18ed      	addgt	r5, r5, r3
 800319e:	f04f 0900 	mov.w	r9, #0
 80031a2:	341a      	adds	r4, #26
 80031a4:	454d      	cmp	r5, r9
 80031a6:	d11a      	bne.n	80031de <_printf_common+0xd6>
 80031a8:	2000      	movs	r0, #0
 80031aa:	e008      	b.n	80031be <_printf_common+0xb6>
 80031ac:	2301      	movs	r3, #1
 80031ae:	4652      	mov	r2, sl
 80031b0:	4639      	mov	r1, r7
 80031b2:	4630      	mov	r0, r6
 80031b4:	47c0      	blx	r8
 80031b6:	3001      	adds	r0, #1
 80031b8:	d103      	bne.n	80031c2 <_printf_common+0xba>
 80031ba:	f04f 30ff 	mov.w	r0, #4294967295
 80031be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c2:	3501      	adds	r5, #1
 80031c4:	e7c3      	b.n	800314e <_printf_common+0x46>
 80031c6:	18e1      	adds	r1, r4, r3
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	2030      	movs	r0, #48	; 0x30
 80031cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031d0:	4422      	add	r2, r4
 80031d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031da:	3302      	adds	r3, #2
 80031dc:	e7c5      	b.n	800316a <_printf_common+0x62>
 80031de:	2301      	movs	r3, #1
 80031e0:	4622      	mov	r2, r4
 80031e2:	4639      	mov	r1, r7
 80031e4:	4630      	mov	r0, r6
 80031e6:	47c0      	blx	r8
 80031e8:	3001      	adds	r0, #1
 80031ea:	d0e6      	beq.n	80031ba <_printf_common+0xb2>
 80031ec:	f109 0901 	add.w	r9, r9, #1
 80031f0:	e7d8      	b.n	80031a4 <_printf_common+0x9c>
	...

080031f4 <_printf_i>:
 80031f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80031fc:	460c      	mov	r4, r1
 80031fe:	7e09      	ldrb	r1, [r1, #24]
 8003200:	b085      	sub	sp, #20
 8003202:	296e      	cmp	r1, #110	; 0x6e
 8003204:	4617      	mov	r7, r2
 8003206:	4606      	mov	r6, r0
 8003208:	4698      	mov	r8, r3
 800320a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800320c:	f000 80b3 	beq.w	8003376 <_printf_i+0x182>
 8003210:	d822      	bhi.n	8003258 <_printf_i+0x64>
 8003212:	2963      	cmp	r1, #99	; 0x63
 8003214:	d036      	beq.n	8003284 <_printf_i+0x90>
 8003216:	d80a      	bhi.n	800322e <_printf_i+0x3a>
 8003218:	2900      	cmp	r1, #0
 800321a:	f000 80b9 	beq.w	8003390 <_printf_i+0x19c>
 800321e:	2958      	cmp	r1, #88	; 0x58
 8003220:	f000 8083 	beq.w	800332a <_printf_i+0x136>
 8003224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003228:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800322c:	e032      	b.n	8003294 <_printf_i+0xa0>
 800322e:	2964      	cmp	r1, #100	; 0x64
 8003230:	d001      	beq.n	8003236 <_printf_i+0x42>
 8003232:	2969      	cmp	r1, #105	; 0x69
 8003234:	d1f6      	bne.n	8003224 <_printf_i+0x30>
 8003236:	6820      	ldr	r0, [r4, #0]
 8003238:	6813      	ldr	r3, [r2, #0]
 800323a:	0605      	lsls	r5, r0, #24
 800323c:	f103 0104 	add.w	r1, r3, #4
 8003240:	d52a      	bpl.n	8003298 <_printf_i+0xa4>
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6011      	str	r1, [r2, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da03      	bge.n	8003252 <_printf_i+0x5e>
 800324a:	222d      	movs	r2, #45	; 0x2d
 800324c:	425b      	negs	r3, r3
 800324e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003252:	486f      	ldr	r0, [pc, #444]	; (8003410 <_printf_i+0x21c>)
 8003254:	220a      	movs	r2, #10
 8003256:	e039      	b.n	80032cc <_printf_i+0xd8>
 8003258:	2973      	cmp	r1, #115	; 0x73
 800325a:	f000 809d 	beq.w	8003398 <_printf_i+0x1a4>
 800325e:	d808      	bhi.n	8003272 <_printf_i+0x7e>
 8003260:	296f      	cmp	r1, #111	; 0x6f
 8003262:	d020      	beq.n	80032a6 <_printf_i+0xb2>
 8003264:	2970      	cmp	r1, #112	; 0x70
 8003266:	d1dd      	bne.n	8003224 <_printf_i+0x30>
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	f043 0320 	orr.w	r3, r3, #32
 800326e:	6023      	str	r3, [r4, #0]
 8003270:	e003      	b.n	800327a <_printf_i+0x86>
 8003272:	2975      	cmp	r1, #117	; 0x75
 8003274:	d017      	beq.n	80032a6 <_printf_i+0xb2>
 8003276:	2978      	cmp	r1, #120	; 0x78
 8003278:	d1d4      	bne.n	8003224 <_printf_i+0x30>
 800327a:	2378      	movs	r3, #120	; 0x78
 800327c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003280:	4864      	ldr	r0, [pc, #400]	; (8003414 <_printf_i+0x220>)
 8003282:	e055      	b.n	8003330 <_printf_i+0x13c>
 8003284:	6813      	ldr	r3, [r2, #0]
 8003286:	1d19      	adds	r1, r3, #4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6011      	str	r1, [r2, #0]
 800328c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003294:	2301      	movs	r3, #1
 8003296:	e08c      	b.n	80033b2 <_printf_i+0x1be>
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6011      	str	r1, [r2, #0]
 800329c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032a0:	bf18      	it	ne
 80032a2:	b21b      	sxthne	r3, r3
 80032a4:	e7cf      	b.n	8003246 <_printf_i+0x52>
 80032a6:	6813      	ldr	r3, [r2, #0]
 80032a8:	6825      	ldr	r5, [r4, #0]
 80032aa:	1d18      	adds	r0, r3, #4
 80032ac:	6010      	str	r0, [r2, #0]
 80032ae:	0628      	lsls	r0, r5, #24
 80032b0:	d501      	bpl.n	80032b6 <_printf_i+0xc2>
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	e002      	b.n	80032bc <_printf_i+0xc8>
 80032b6:	0668      	lsls	r0, r5, #25
 80032b8:	d5fb      	bpl.n	80032b2 <_printf_i+0xbe>
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	4854      	ldr	r0, [pc, #336]	; (8003410 <_printf_i+0x21c>)
 80032be:	296f      	cmp	r1, #111	; 0x6f
 80032c0:	bf14      	ite	ne
 80032c2:	220a      	movne	r2, #10
 80032c4:	2208      	moveq	r2, #8
 80032c6:	2100      	movs	r1, #0
 80032c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032cc:	6865      	ldr	r5, [r4, #4]
 80032ce:	60a5      	str	r5, [r4, #8]
 80032d0:	2d00      	cmp	r5, #0
 80032d2:	f2c0 8095 	blt.w	8003400 <_printf_i+0x20c>
 80032d6:	6821      	ldr	r1, [r4, #0]
 80032d8:	f021 0104 	bic.w	r1, r1, #4
 80032dc:	6021      	str	r1, [r4, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d13d      	bne.n	800335e <_printf_i+0x16a>
 80032e2:	2d00      	cmp	r5, #0
 80032e4:	f040 808e 	bne.w	8003404 <_printf_i+0x210>
 80032e8:	4665      	mov	r5, ip
 80032ea:	2a08      	cmp	r2, #8
 80032ec:	d10b      	bne.n	8003306 <_printf_i+0x112>
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	07db      	lsls	r3, r3, #31
 80032f2:	d508      	bpl.n	8003306 <_printf_i+0x112>
 80032f4:	6923      	ldr	r3, [r4, #16]
 80032f6:	6862      	ldr	r2, [r4, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	bfde      	ittt	le
 80032fc:	2330      	movle	r3, #48	; 0x30
 80032fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003302:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003306:	ebac 0305 	sub.w	r3, ip, r5
 800330a:	6123      	str	r3, [r4, #16]
 800330c:	f8cd 8000 	str.w	r8, [sp]
 8003310:	463b      	mov	r3, r7
 8003312:	aa03      	add	r2, sp, #12
 8003314:	4621      	mov	r1, r4
 8003316:	4630      	mov	r0, r6
 8003318:	f7ff fef6 	bl	8003108 <_printf_common>
 800331c:	3001      	adds	r0, #1
 800331e:	d14d      	bne.n	80033bc <_printf_i+0x1c8>
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	b005      	add	sp, #20
 8003326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800332a:	4839      	ldr	r0, [pc, #228]	; (8003410 <_printf_i+0x21c>)
 800332c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003330:	6813      	ldr	r3, [r2, #0]
 8003332:	6821      	ldr	r1, [r4, #0]
 8003334:	1d1d      	adds	r5, r3, #4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6015      	str	r5, [r2, #0]
 800333a:	060a      	lsls	r2, r1, #24
 800333c:	d50b      	bpl.n	8003356 <_printf_i+0x162>
 800333e:	07ca      	lsls	r2, r1, #31
 8003340:	bf44      	itt	mi
 8003342:	f041 0120 	orrmi.w	r1, r1, #32
 8003346:	6021      	strmi	r1, [r4, #0]
 8003348:	b91b      	cbnz	r3, 8003352 <_printf_i+0x15e>
 800334a:	6822      	ldr	r2, [r4, #0]
 800334c:	f022 0220 	bic.w	r2, r2, #32
 8003350:	6022      	str	r2, [r4, #0]
 8003352:	2210      	movs	r2, #16
 8003354:	e7b7      	b.n	80032c6 <_printf_i+0xd2>
 8003356:	064d      	lsls	r5, r1, #25
 8003358:	bf48      	it	mi
 800335a:	b29b      	uxthmi	r3, r3
 800335c:	e7ef      	b.n	800333e <_printf_i+0x14a>
 800335e:	4665      	mov	r5, ip
 8003360:	fbb3 f1f2 	udiv	r1, r3, r2
 8003364:	fb02 3311 	mls	r3, r2, r1, r3
 8003368:	5cc3      	ldrb	r3, [r0, r3]
 800336a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800336e:	460b      	mov	r3, r1
 8003370:	2900      	cmp	r1, #0
 8003372:	d1f5      	bne.n	8003360 <_printf_i+0x16c>
 8003374:	e7b9      	b.n	80032ea <_printf_i+0xf6>
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	6825      	ldr	r5, [r4, #0]
 800337a:	6961      	ldr	r1, [r4, #20]
 800337c:	1d18      	adds	r0, r3, #4
 800337e:	6010      	str	r0, [r2, #0]
 8003380:	0628      	lsls	r0, r5, #24
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	d501      	bpl.n	800338a <_printf_i+0x196>
 8003386:	6019      	str	r1, [r3, #0]
 8003388:	e002      	b.n	8003390 <_printf_i+0x19c>
 800338a:	066a      	lsls	r2, r5, #25
 800338c:	d5fb      	bpl.n	8003386 <_printf_i+0x192>
 800338e:	8019      	strh	r1, [r3, #0]
 8003390:	2300      	movs	r3, #0
 8003392:	6123      	str	r3, [r4, #16]
 8003394:	4665      	mov	r5, ip
 8003396:	e7b9      	b.n	800330c <_printf_i+0x118>
 8003398:	6813      	ldr	r3, [r2, #0]
 800339a:	1d19      	adds	r1, r3, #4
 800339c:	6011      	str	r1, [r2, #0]
 800339e:	681d      	ldr	r5, [r3, #0]
 80033a0:	6862      	ldr	r2, [r4, #4]
 80033a2:	2100      	movs	r1, #0
 80033a4:	4628      	mov	r0, r5
 80033a6:	f7fc ff2b 	bl	8000200 <memchr>
 80033aa:	b108      	cbz	r0, 80033b0 <_printf_i+0x1bc>
 80033ac:	1b40      	subs	r0, r0, r5
 80033ae:	6060      	str	r0, [r4, #4]
 80033b0:	6863      	ldr	r3, [r4, #4]
 80033b2:	6123      	str	r3, [r4, #16]
 80033b4:	2300      	movs	r3, #0
 80033b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ba:	e7a7      	b.n	800330c <_printf_i+0x118>
 80033bc:	6923      	ldr	r3, [r4, #16]
 80033be:	462a      	mov	r2, r5
 80033c0:	4639      	mov	r1, r7
 80033c2:	4630      	mov	r0, r6
 80033c4:	47c0      	blx	r8
 80033c6:	3001      	adds	r0, #1
 80033c8:	d0aa      	beq.n	8003320 <_printf_i+0x12c>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	079b      	lsls	r3, r3, #30
 80033ce:	d413      	bmi.n	80033f8 <_printf_i+0x204>
 80033d0:	68e0      	ldr	r0, [r4, #12]
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	4298      	cmp	r0, r3
 80033d6:	bfb8      	it	lt
 80033d8:	4618      	movlt	r0, r3
 80033da:	e7a3      	b.n	8003324 <_printf_i+0x130>
 80033dc:	2301      	movs	r3, #1
 80033de:	464a      	mov	r2, r9
 80033e0:	4639      	mov	r1, r7
 80033e2:	4630      	mov	r0, r6
 80033e4:	47c0      	blx	r8
 80033e6:	3001      	adds	r0, #1
 80033e8:	d09a      	beq.n	8003320 <_printf_i+0x12c>
 80033ea:	3501      	adds	r5, #1
 80033ec:	68e3      	ldr	r3, [r4, #12]
 80033ee:	9a03      	ldr	r2, [sp, #12]
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	42ab      	cmp	r3, r5
 80033f4:	dcf2      	bgt.n	80033dc <_printf_i+0x1e8>
 80033f6:	e7eb      	b.n	80033d0 <_printf_i+0x1dc>
 80033f8:	2500      	movs	r5, #0
 80033fa:	f104 0919 	add.w	r9, r4, #25
 80033fe:	e7f5      	b.n	80033ec <_printf_i+0x1f8>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ac      	bne.n	800335e <_printf_i+0x16a>
 8003404:	7803      	ldrb	r3, [r0, #0]
 8003406:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800340a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800340e:	e76c      	b.n	80032ea <_printf_i+0xf6>
 8003410:	08003548 	.word	0x08003548
 8003414:	08003559 	.word	0x08003559

08003418 <memcpy>:
 8003418:	b510      	push	{r4, lr}
 800341a:	1e43      	subs	r3, r0, #1
 800341c:	440a      	add	r2, r1
 800341e:	4291      	cmp	r1, r2
 8003420:	d100      	bne.n	8003424 <memcpy+0xc>
 8003422:	bd10      	pop	{r4, pc}
 8003424:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003428:	f803 4f01 	strb.w	r4, [r3, #1]!
 800342c:	e7f7      	b.n	800341e <memcpy+0x6>

0800342e <memmove>:
 800342e:	4288      	cmp	r0, r1
 8003430:	b510      	push	{r4, lr}
 8003432:	eb01 0302 	add.w	r3, r1, r2
 8003436:	d807      	bhi.n	8003448 <memmove+0x1a>
 8003438:	1e42      	subs	r2, r0, #1
 800343a:	4299      	cmp	r1, r3
 800343c:	d00a      	beq.n	8003454 <memmove+0x26>
 800343e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003442:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003446:	e7f8      	b.n	800343a <memmove+0xc>
 8003448:	4283      	cmp	r3, r0
 800344a:	d9f5      	bls.n	8003438 <memmove+0xa>
 800344c:	1881      	adds	r1, r0, r2
 800344e:	1ad2      	subs	r2, r2, r3
 8003450:	42d3      	cmn	r3, r2
 8003452:	d100      	bne.n	8003456 <memmove+0x28>
 8003454:	bd10      	pop	{r4, pc}
 8003456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800345a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800345e:	e7f7      	b.n	8003450 <memmove+0x22>

08003460 <_realloc_r>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	4607      	mov	r7, r0
 8003464:	4614      	mov	r4, r2
 8003466:	460e      	mov	r6, r1
 8003468:	b921      	cbnz	r1, 8003474 <_realloc_r+0x14>
 800346a:	4611      	mov	r1, r2
 800346c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003470:	f7ff bc46 	b.w	8002d00 <_malloc_r>
 8003474:	b922      	cbnz	r2, 8003480 <_realloc_r+0x20>
 8003476:	f7ff fbf5 	bl	8002c64 <_free_r>
 800347a:	4625      	mov	r5, r4
 800347c:	4628      	mov	r0, r5
 800347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003480:	f000 f814 	bl	80034ac <_malloc_usable_size_r>
 8003484:	42a0      	cmp	r0, r4
 8003486:	d20f      	bcs.n	80034a8 <_realloc_r+0x48>
 8003488:	4621      	mov	r1, r4
 800348a:	4638      	mov	r0, r7
 800348c:	f7ff fc38 	bl	8002d00 <_malloc_r>
 8003490:	4605      	mov	r5, r0
 8003492:	2800      	cmp	r0, #0
 8003494:	d0f2      	beq.n	800347c <_realloc_r+0x1c>
 8003496:	4631      	mov	r1, r6
 8003498:	4622      	mov	r2, r4
 800349a:	f7ff ffbd 	bl	8003418 <memcpy>
 800349e:	4631      	mov	r1, r6
 80034a0:	4638      	mov	r0, r7
 80034a2:	f7ff fbdf 	bl	8002c64 <_free_r>
 80034a6:	e7e9      	b.n	800347c <_realloc_r+0x1c>
 80034a8:	4635      	mov	r5, r6
 80034aa:	e7e7      	b.n	800347c <_realloc_r+0x1c>

080034ac <_malloc_usable_size_r>:
 80034ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034b0:	1f18      	subs	r0, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bfbc      	itt	lt
 80034b6:	580b      	ldrlt	r3, [r1, r0]
 80034b8:	18c0      	addlt	r0, r0, r3
 80034ba:	4770      	bx	lr

080034bc <_init>:
 80034bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034be:	bf00      	nop
 80034c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c2:	bc08      	pop	{r3}
 80034c4:	469e      	mov	lr, r3
 80034c6:	4770      	bx	lr

080034c8 <_fini>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	bf00      	nop
 80034cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ce:	bc08      	pop	{r3}
 80034d0:	469e      	mov	lr, r3
 80034d2:	4770      	bx	lr
